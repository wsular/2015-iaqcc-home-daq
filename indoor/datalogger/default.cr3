''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Indoor Air Quality 2015 | Home interior DAQ
'
' Data acquistion program
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'update before deployment but DO NOT check-in other than empty string!
Const GIT_TAG = ""

' I/O
Const DF_TSI_PM = 1
Const DF_LICOR_CO2 = 2
Const DF_LICOR_H2O = 3
Const DF_LGR_CH4 = 4
Const DF_LGR_CO2 = 5
Const DF_LGR_H2O = 6
Const DF_TWOB_O3 = 7

' Analog scaling
Const TSI_PM_OFF = 0
Const TSI_PM_MLT = (1.0 - TSI_PM_OFF)/5000 '0-1.0 mg/m^3, 0-5V
Const LICOR_CO2_OFF = 0
Const LICOR_CO2_MLT = (1 - LICOR_CO2_OFF)/5000 '0-X ?, 0-5V
Const LICOR_H2O_OFF = 0
Const LICOR_H2O_MLT = (1 - LICOR_H2O_OFF)/5000 '0-X ?, 0-5V
Const LGR_CH4_OFF = 0
Const LGR_CH4_MLT = (100 - LGR_CH4_OFF)/5000 '0-100 ppm, 0-5V
Const LGR_CO2_OFF = 0
Const LGR_CO2_MLT = (5000 - LGR_CO2_OFF)/5000 '0-5000 ppm, 0-5V
Const LGR_H2O_OFF = 1
Const LGR_H2O_MLT = (50000 - LGR_H2O_OFF)/5000 '0-50000 ppm, 0-5V
Const TWOB_O3_OFF = 0
Const TWOB_O3_MLT = 0.2 '????

' Serial input
Const DYLOS_COM = Com4
Const DYLOS_BAUD = 9600
Const DYLOS_FMT = 3 '8/n/1
Const DYLOS_BUFF = 12

'Const COM_LGR = 2 'C3/4
Const NOX_COM = Com3
Const NOX_BAUD = 19200
Const NOX_FMT = 3 '8/n/1
Const NOX_BUFF = 128

'Const COM_BT_MFC = 4 'C7/8
'Const COM_LICOR = ComRS232


'============================== INTERNALS ===================================
Const SCAN_INTV = 1
Const SCAN_BUFF = 10
Const INTEG = 250
Const STOP_WHEN_FULL = 0 

Const FT3_PER_M3 = 35.314667

Public d(7)
Alias d(1) = pm_tsi
Alias d(2) = co2_licor
Alias d(3) = h2o_licor
Alias d(4) = ch4_lgr
Alias d(5) = co2_lgr
Alias d(6) = h2o_lgr
Alias d(7) = o3_twob
Units pm_tsi = mg/m^3
Units co2_licor = ppmv
Units h2o_licor = ppmv
Units ch4_lgr = ppmv
Units co2_lgr = ppmv
Units h2o_lgr = ppmv
Units o3_twob = ppbv

Dim dc1100_record As String * 12
Dim dc1100_vals(2)
'dc1100_vals(1) = "small" counts / 100 ft^3
'dc1100_vals(2) = "large" counts / 100 ft^3
Dim dc1100(2)
Alias dc1100(1) = dc1100_pm_small
Alias dc1100(2) = dc1100_pm_large
Units dc1100_pm_small = counts/m^3
Units dc1100_pm_large = counts/m^3

Dim nox_record As String * 128
Public nox(22)
Alias nox(1)  = m405_NO2
Alias nox(2)  = m405_NO
Alias nox(3)  = m405_NOx
Alias nox(4)  = m405_NO2_zero
Alias nox(5)  = m405_NO_zero
Alias nox(6)  = m405_flow_factor
Alias nox(7)  = m405_cell_T
Alias nox(8)  = m405_cell_P
Alias nox(9)  = m405_overflow_F
Alias nox(10) = m405_cell_F
Alias nox(11) = m405_O3_F
Alias nox(12) = m405_samp_LED_V
Alias nox(13) = m405_ref_LED_V
Alias nox(14) = m405_NO_gen_V
Alias nox(15) = m405_scrubber_T
'16: date, day of month
'17: date, month
'18: date, short year
'19: time, hour
'20: time, minutes
'21: time, seconds
Alias nox(22) = m405_status
Units m405_NO2 = ppb
Units m405_NO = ppb
Units m405_NOx = ppb
Units m405_NO2_zero = ppb
Units m405_NO_zero = ppb
Units m405_cell_T = degC
Units m405_cell_P = mbar
Units m405_overflow_F = cc/min
Units m405_cell_F = cc/min
Units m405_O3_F = cc/min
Units m405_samp_LED_V = volts
Units m405_ref_LED_V = volts
Units m405_NO_gen_V = volts
Units m405_scrubber_T = degC

Public disable(5)
Alias disable(1) = disable_tsi
Alias disable(2) = disable_licor
Alias disable(3) = disable_lgr
Alias disable(4) = disable_twob_o3
Alias disable(5) = disable_nox

Dim t(24)
't(1)  = dc1100_pm_small
't(2)  = dc1100_pm_large
't(3)  = pm_tsi
't(4)  = co2_licor
't(5)  = h2o_licor
't(6)  = ch4_lgr
't(7)  = co2_lgr
't(8)  = h2o_lgr
't(9)  = o3_twob
't(10) = m405_NO2    'Average(15,...)
't(11) = m405_NO
't(12) = m405_NOx
't(13) = m405_NO2_zero
't(14) = m405_NO_zero
't(15) = m405_flow_factor
't(16) = m405_cell_T
't(17) = m405_cell_P
't(18) = m405_overflow_F
't(19) = m405_cell_F
't(20) = m405_O3_F
't(21) = m405_samp_LED_V
't(22) = m405_ref_LED_V
't(23) = m405_NO_gen_V
't(24) = m405_scrubber_T


'============================ DATA TABLES ===================================
DataTable(tsdata,True,10000)
  DataInterval(0,1,min,5)
  CardOut(STOP_WHEN_FULL,10000)
  Sample(2,dc1100,IEEE4)
  Sample(7,d,IEEE4)
  Sample(15,nox,IEEE4)
EndTable

DataTable(stats,True,10000)
  DataInterval(0,30,min,1)
  CardOut(STOP_WHEN_FULL,10000)
  Average(1,dc1100_pm_small,IEEE4,dc1100_pm_small=NAN)
  Average(1,dc1100_pm_large,IEEE4,dc1100_pm_large=NAN)
  Average(1,pm_tsi,IEEE4,pm_tsi=NAN)
  Average(1,co2_licor,IEEE4,disable_licor)
  Average(1,h2o_licor,IEEE4,disable_licor)
  Average(1,ch4_lgr,IEEE4,disable_lgr)
  Average(1,co2_lgr,IEEE4,disable_lgr)
  Average(1,h2o_lgr,IEEE4,disable_lgr)
  Average(1,o3_twob,IEEE4,disable_twob_o3)
  Average(15,nox,IEEE4,disable_nox)
EndTable

DataTable(telemetry,True,1)
  DataInterval(0,5,min,1)
  Average(1,dc1100_pm_small,IEEE4,dc1100_pm_small=NAN)
  Average(1,dc1100_pm_large,IEEE4,dc1100_pm_large=NAN)
  Average(1,pm_tsi,IEEE4,pm_tsi=NAN)
  Average(1,co2_licor,IEEE4,disable_licor)
  Average(1,h2o_licor,IEEE4,disable_licor)
  Average(1,ch4_lgr,IEEE4,disable_lgr)
  Average(1,co2_lgr,IEEE4,disable_lgr)
  Average(1,h2o_lgr,IEEE4,disable_lgr)
  Average(1,o3_twob,IEEE4,disable_twob_o3)
  Average(15,nox,IEEE4,disable_nox)
EndTable


'================================== MENU ====================================
Const Yes = True
Const Cancel = False

Public test_scadabr As Boolean

DisplayMenu("Indoor AQ", -1)
  SubMenu("Debug")
    SubMenu("Monitor sensors")
      DisplayValue("Dusttrak PM", pm_tsi)
      SubMenu("PM (Dylos)")
        DisplayValue("DC1100 small", dc1100_pm_small)
        DisplayValue("DC1100 large", dc1100_pm_large)
      EndSubMenu
      DisplayValue("LI840A H2O", h2o_licor)
      DisplayValue("LGR CH4", ch4_lgr)
      DisplayValue("LGR CO2", co2_lgr)
      DisplayValue("LGR H2O", h2o_lgr)
      DisplayValue("2B O3", o3_twob)
      SubMenu("NO/NO2 (2B Tech)")
        DisplayValue("NO2", m405_NO2)
        DisplayValue("NO", m405_NO)
        DisplayValue("NOx", m405_NOx)
        DisplayValue("NO2 zero", m405_NO2_zero)
        DisplayValue("NO zero", m405_NO_zero)
        DisplayValue("Flow factor", m405_flow_factor)
        DisplayValue("Cell tmpr.", m405_cell_T)
        DisplayValue("Cell press.", m405_cell_P)
        DisplayValue("Cell flow", m405_cell_F)
        DisplayValue("Overflow", m405_overflow_F)
        DisplayValue("O3 flow", m405_O3_F)
        DisplayValue("Smp LED V", m405_samp_LED_V)
        DisplayValue("Ref LED V", m405_ref_LED_V)
        DisplayValue("NO gen. V", m405_NO_gen_V)
        DisplayValue("Status", m405_status)
      EndSubMenu
    EndSubMenu
    MenuItem("Test ScadaBR", test_scadabr)
      MenuPick(Cancel, Yes)
  EndSubMenu
EndMenu


'============================= SCADABR INTEGRATION ==================================
Include("CPU:scadabr_Enc.cr3")
Dim scadabr_socket As Long
Dim rtime(9) As Long
Dim scadabr_success As Boolean
Dim scadabr_resp As String * 256
Dim send_report_now As Boolean

Sub send_scadabr_data(payload As String * 600)
  Dim uri As String * 685
  Dim tstamp As String * 18
  RealTime(rtime)
  Sprintf(tstamp,"%04u%02u%02u%02u%02u%02u", rtime(1),rtime(2),rtime(3),rtime(4),rtime(5),rtime(6))
  uri = REPORT_URL & tstamp & payload
  scadabr_socket = HTTPGet(uri, scadabr_resp, "")
  scadabr_success = NOT (scadabr_socket OR Len(scadabr_resp))
EndSub

Sub send_test_ScadaBR()
  send_scadabr_data("&testing=0")
  test_scadabr = False
EndSub

'                1                   2                   3           4
Const REPORT1 = "&dc1100_pm_small=%.1f&dc1100_pm_large=%.1f&pm_tsi=%.3f&co2_licor=%.3f"
'                5              6            7            8            9
Const REPORT2 = "&h2o_licor=%.3f&ch4_lgr=%.2f&co2_lgr=%.1f&h2o_lgr=%.1f&o3_twob=%.1f"
'                10            11           12            13
Const REPORT3 = "&m405_no2=%.1f&m405_no=%.1f&m405_nox=%.1f&m405_no2_zero=%.1f"
'                14                15                    16               17
Const REPORT4 = "&m405_no_zero=%.1f&m405_flow_factor=%.2f&m405_cell_t=%.1f&m405_cell_p=%.1f"
'                18                   19               20             21
Const REPORT5 = "&m405_overflow_f=%.1f&m405_cell_f=%.1f&m405_o3_f=%.1f&m405_samp_led_v=%.4f"
'                22                  23                 24
Const REPORT6 = "&m405_ref_led_v=%.4f&m405_no_gen_v=%.4f&m405_scrubber_t=%.2f"
Sub send_telemetry_report()
  Dim msg1 As String * 100, msg2 As String * 100, msg3 As String * 100
  Dim msg4 As String * 100, msg5 As String * 100, msg6 As String * 100
  Dim payload As String * 600
  Sprintf(msg1,REPORT1,t(1),t(2),t(3),t(4))
  Sprintf(msg2,REPORT2,t(5),t(6),t(7),t(8),t(9))
  Sprintf(msg3,REPORT3,t(10),t(11),t(12),t(13))
  Sprintf(msg4,REPORT4,t(14),t(15),t(16),t(17))
  Sprintf(msg5,REPORT5,t(18),t(19),t(20),t(21))
  Sprintf(msg6,REPORT6,t(22),t(23),t(24))
  payload = msg1 & msg2 & msg3 & msg4 & msg5 & msg6
  send_scadabr_data(payload)
EndSub


'================================ FUNCTIONS =================================
Function convert_dc1100_value(number) As Float
  'counts/100 per cubic foot => counts per cubic meter
  Return INT(number * 100 * FT3_PER_M3)
EndFunction


'============================== SUBROUTINES =================================
Sub setup()
  SerialOpen(DYLOS_COM,DYLOS_BAUD,DYLOS_FMT,0,DYLOS_BUFF)
  SerialOpen(NOX_COM,NOX_BAUD,NOX_FMT,0,NOX_BUFF)
EndSub


'========================= MAIN PROGRAM =====================================
BeginProg
  setup()

  Scan(SCAN_INTV,Sec,SCAN_BUFF,0)
    VoltDiff(pm_tsi,1,mv5000,DF_TSI_PM,True,0,INTEG,TSI_PM_MLT,TSI_PM_OFF)
    VoltDiff(co2_licor,1,mv5000,DF_LICOR_CO2,True,0,INTEG,LICOR_CO2_MLT,LICOR_CO2_OFF)
    VoltDiff(h2o_licor,1,mv5000,DF_LICOR_H2O,True,0,INTEG,LICOR_H2O_MLT,LICOR_H2O_OFF)
    VoltDiff(ch4_lgr,1,mv5000,DF_LGR_CH4,True,0,INTEG,LGR_CH4_MLT,LGR_CH4_OFF)
    VoltDiff(co2_lgr,1,mv5000,DF_LGR_CO2,True,0,INTEG,LGR_CO2_MLT,LGR_CO2_OFF)
    VoltDiff(h2o_lgr,1,mv5000,DF_LGR_H2O,True,0,INTEG,LGR_H2O_MLT,LGR_H2O_OFF)
    VoltDiff(o3_twob,1,mv5000,DF_TWOB_O3,True,0,INTEG,TWOB_O3_MLT,TWOB_O3_OFF)
  NextScan

  SlowSequence
  Scan(1,min,1,0)
    SerialIn(dc1100_record,DYLOS_COM,100,&h0D,DYLOS_BUFF)
    If (Len(dc1100_record)) Then
      SplitStr(dc1100_vals(1),dc1100_record,"",2,0)
      If (dc1100_vals(1)=NAN OR dc1100_vals(2)=NAN) Then
        dc1100_pm_small = NAN
        dc1100_pm_large = NAN
      Else
        dc1100_pm_small = convert_dc1100_value(dc1100_vals(1))
        dc1100_pm_large = convert_dc1100_value(dc1100_vals(2))
      EndIf
    EndIf

    SerialIn(nox_record,NOX_COM,100,&h0D,NOX_BUFF)
    If (Len(nox_record)) Then
      SplitStr(nox(1),nox_record,"",22,0)
      'TODO detect bad input
    EndIf

    CallTable(tsdata)
    CallTable(stats)
  NextScan

  SlowSequence
  Scan(1,Sec,2,0)
    If (test_scadabr) Then
      send_test_ScadaBR()
    EndIf
    
    CallTable(telemetry)
    If (telemetry.Output(1,1)) Then
      GetRecord(t(1),telemetry,1)
      send_telemetry_report()
    EndIf
  NextScan
EndProg

