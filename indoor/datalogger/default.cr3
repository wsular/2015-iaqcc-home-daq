''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Indoor Air Quality 2015 | Home interior DAQ
'
' Data acquistion program
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'update before deployment but DO NOT check-in other than empty string!
Const GIT_TAG = ""

' I/O
Const DF_TSI_PM = 1
Const DF_LICOR_CO2 = 2
Const DF_LICOR_H2O = 3
Const DF_TWOB_O3 = 7

' Analog scaling
Const TSI_PM_OFF = 0
Const TSI_PM_MLT = (1.0 - TSI_PM_OFF)/5000 '0-1.0 mg/m^3, 0-5V
Const LICOR_CO2_OFF = 0
Const LICOR_CO2_MLT = (1 - LICOR_CO2_OFF)/5000 '0-X ?, 0-5V
Const LICOR_H2O_OFF = 0
Const LICOR_H2O_MLT = (1 - LICOR_H2O_OFF)/5000 '0-X ?, 0-5V
Const TWOB_O3_OFF = 0
Const TWOB_O3_MLT = 0.2 '????

' Serial input
Const DYLOS_COM = Com4
Const DYLOS_BAUD = 9600
Const DYLOS_FMT = 3 '8/n/1
Const DYLOS_BUFF = 12

Const NOX_COM = Com3
Const NOX_BAUD = 19200
Const NOX_FMT = 3 '8/n/1
Const NOX_BUFF = 128

Const CH4_COM = Com2
Const CH4_BAUD = 19200
Const CH4_FMT = 3 '8/n/1
Const CH4_BUFF = 800

'Const COM_BT_MFC = 4 'C7/8
'Const COM_LICOR = ComRS232


'============================== INTERNALS ===================================
Const SCAN_INTV = 500
Const SCAN_BUFF = 10
Const INTEG = 250
Const STOP_WHEN_FULL = 0 

Const FT3_PER_M3 = 35.314667
Const MBAR_PER_TORR = 1.3332237

Public d(4)
Alias d(1) = pm_tsi
Alias d(2) = co2_licor
Alias d(3) = h2o_licor
Alias d(4) = o3_twob
Units pm_tsi = mg/m^3
Units co2_licor = ppmv
Units h2o_licor = ppmv
Units o3_twob = ppbv

Dim dc1100_record As String * 12
Dim dc1100_vals(2)
'dc1100_vals(1) = "small" counts / 100 ft^3
'dc1100_vals(2) = "large" counts / 100 ft^3
Dim dc1100(2)
Alias dc1100(1) = dc1100_pm_small
Alias dc1100(2) = dc1100_pm_large
Units dc1100_pm_small = counts/m^3
Units dc1100_pm_large = counts/m^3

Dim nox_record As String * 128
Public nox(22)
Alias nox(1)  = m405_NO2
Alias nox(2)  = m405_NO
Alias nox(3)  = m405_NOx
Alias nox(4)  = m405_NO2_zero
Alias nox(5)  = m405_NO_zero
Alias nox(6)  = m405_flow_factor
Alias nox(7)  = m405_cell_T
Alias nox(8)  = m405_cell_P
Alias nox(9)  = m405_overflow_F
Alias nox(10) = m405_cell_F
Alias nox(11) = m405_O3_F
Alias nox(12) = m405_samp_LED_V
Alias nox(13) = m405_ref_LED_V
Alias nox(14) = m405_NO_gen_V
Alias nox(15) = m405_scrubber_T
'16: date, day of month
'17: date, month
'18: date, short year
'19: time, hour
'20: time, minutes
'21: time, seconds
Alias nox(22) = m405_status
Units m405_NO2 = ppb
Units m405_NO = ppb
Units m405_NOx = ppb
Units m405_NO2_zero = ppb
Units m405_NO_zero = ppb
Units m405_cell_T = degC
Units m405_cell_P = mbar
Units m405_overflow_F = cc/min
Units m405_cell_F = cc/min
Units m405_O3_F = cc/min
Units m405_samp_LED_V = volts
Units m405_ref_LED_V = volts
Units m405_NO_gen_V = volts
Units m405_scrubber_T = degC

Public ch4_record As String * 400
Public ch4_year
Public ch4(25)
'1: date (well, year)
'2: time (well, hour)
Alias ch4(3)  = gga30p_CH4
'4: CH4 s.d.
Alias ch4(5)  = gga30p_H2O
'6: H2O s.d.
Alias ch4(7) = gga30p_CO2
'8: CO2 s.d.
Alias ch4(9) = gga30p_CH4_dry
'10: CH4 dry s.d.
Alias ch4(11) = gga30p_CO2_dry
'12: CO2 dry s.d.
Alias ch4(13) = gga30p_gas_P
'14: gas P s.d.
Alias ch4(15) = gga30p_gas_T
'16: gas T s.d.
Alias ch4(17) = gga30p_amb_T
'18: amb T s.d.
Alias ch4(19) = gga30p_ringdown0
'20: ringdown #0 s.d.
Alias ch4(21) = gga30p_ringdown1
'22: ringdown #1 s.d.
Alias ch4(23) = gga30p_fit_flag
'24: MIU valve
'25: MIU description
Units gga30p_CH4 = ppm (wet)
Units gga30p_H2O = ppm
Units gga30p_CO2 = ppm (wet)
Units gga30p_CH4_dry = ppm
Units gga30p_CO2_dry = ppm
Units gga30p_gas_P = mbar
Units gga30p_gas_T = degC
Units gga30p_amb_T = degC
Units gga30p_ringdown0 = usec
Units gga30p_ringdown1 = usec
Units gga30p_fit_flag = arb

Public disable(5) As Boolean
Alias disable(1) = disable_tsi
Alias disable(2) = disable_licor
Alias disable(3) = disable_gga30p
Alias disable(4) = disable_twob_o3
Alias disable(5) = disable_nox

Dim t(32)
't(1)  = dc1100_pm_small
't(2)  = dc1100_pm_large
't(3)  = pm_tsi
't(4)  = co2_licor
't(5)  = h2o_licor
't(6)  = o3_twob
't(7) = m405_NO2    'Average(15,...)
't(8) = m405_NO
't(9) = m405_NOx
't(10) = m405_NO2_zero
't(11) = m405_NO_zero
't(12) = m405_flow_factor
't(13) = m405_cell_T
't(14) = m405_cell_P
't(15) = m405_overflow_F
't(16) = m405_cell_F
't(17) = m405_O3_F
't(18) = m405_samp_LED_V
't(19) = m405_ref_LED_V
't(20) = m405_NO_gen_V
't(21) = m405_scrubber_T
't(22) = gga30p_CH4
't(23) = gga30p_H2O
't(24) = gga30p_CO2
't(25) = gga30p_CH4_dry
't(26) = gga30p_CO2_dry
't(27) = gga30p_gas_P
't(28) = gga30p_gas_T
't(29) = gga30p_amb_T
't(30) = gga30p_ringdown0
't(31) = gga30p_ringdown1
't(32) = gga30p_fit_flag


'============================ DATA TABLES ===================================
DataTable(tsdata,True,10000)
  DataInterval(0,1,min,5)
  CardOut(STOP_WHEN_FULL,10000)
  Sample(2,dc1100,IEEE4)
  Sample(4,d,IEEE4)
  Sample(15,nox,IEEE4)
  Sample(1,gga30p_CH4,IEEE4)
  Sample(1,gga30p_H2O,IEEE4)
  Sample(1,gga30p_CO2,IEEE4)
  Sample(1,gga30p_CH4_dry,IEEE4)
  Sample(1,gga30p_CO2_dry,IEEE4)
  Sample(1,gga30p_gas_P,IEEE4)
  Sample(1,gga30p_gas_T,IEEE4)
  Sample(1,gga30p_amb_T,IEEE4)
EndTable

DataTable(stats,True,10000)
  DataInterval(0,30,min,1)
  CardOut(STOP_WHEN_FULL,10000)
  Average(1,dc1100_pm_small,IEEE4,dc1100_pm_small=NAN)
  Average(1,dc1100_pm_large,IEEE4,dc1100_pm_large=NAN)
  Average(1,pm_tsi,IEEE4,pm_tsi=NAN)
  Average(1,co2_licor,IEEE4,disable_licor)
  Average(1,h2o_licor,IEEE4,disable_licor)
  Average(1,o3_twob,IEEE4,disable_twob_o3)
  Average(15,nox,IEEE4,disable_nox)
  Average(1,gga30p_CH4,IEEE4,disable_gga30p OR gga30p_CH4=NAN)
  Average(1,gga30p_H2O,IEEE4,disable_gga30p OR gga30p_H2O=NAN)
  Average(1,gga30p_CO2,IEEE4,disable_gga30p OR gga30p_CO2=NAN)
  Average(1,gga30p_CH4_dry,IEEE4,disable_gga30p OR gga30p_CH4_dry=NAN)
  Average(1,gga30p_CO2_dry,IEEE4,disable_gga30p OR gga30p_CO2_dry=NAN)
  Average(1,gga30p_gas_P,IEEE4,disable_gga30p OR gga30p_gas_P=NAN)
  Average(1,gga30p_gas_T,IEEE4,disable_gga30p OR gga30p_gas_T=NAN)
  Average(1,gga30p_amb_T,IEEE4,disable_gga30p OR gga30p_amb_T=NAN)
EndTable

DataTable(telemetry,True,1)
  DataInterval(0,5,min,1)
  Average(1,dc1100_pm_small,IEEE4,dc1100_pm_small=NAN)
  Average(1,dc1100_pm_large,IEEE4,dc1100_pm_large=NAN)
  Average(1,pm_tsi,IEEE4,pm_tsi=NAN)
  Average(1,co2_licor,IEEE4,disable_licor)
  Average(1,h2o_licor,IEEE4,disable_licor)
  Average(1,o3_twob,IEEE4,disable_twob_o3)
  Average(15,nox,IEEE4,disable_nox)
  Average(1,gga30p_CH4,IEEE4,disable_gga30p OR gga30p_CH4=NAN)
  Average(1,gga30p_H2O,IEEE4,disable_gga30p OR gga30p_H2O=NAN)
  Average(1,gga30p_CO2,IEEE4,disable_gga30p OR gga30p_CO2=NAN)
  Average(1,gga30p_CH4_dry,IEEE4,disable_gga30p OR gga30p_CH4_dry=NAN)
  Average(1,gga30p_CO2_dry,IEEE4,disable_gga30p OR gga30p_CO2_dry=NAN)
  Average(1,gga30p_gas_P,IEEE4,disable_gga30p OR gga30p_gas_P=NAN)
  Average(1,gga30p_gas_T,IEEE4,disable_gga30p OR gga30p_gas_T=NAN)
  Average(1,gga30p_amb_T,IEEE4,disable_gga30p OR gga30p_amb_T=NAN)
  Average(1,gga30p_ringdown0,IEEE4,disable_gga30p OR gga30p_ringdown0=NAN)
  Average(1,gga30p_ringdown1,IEEE4,disable_gga30p OR gga30p_ringdown1=NAN)
  Average(1,gga30p_fit_flag,IEEE4,disable_gga30p OR gga30p_fit_flag=NAN)
EndTable


'================================== MENU ====================================
Const Yes = True
Const Cancel = False

Public test_scadabr As Boolean

DisplayMenu("Indoor AQ", -1)
  SubMenu("Debug")
    SubMenu("Monitor sensors")
      DisplayValue("Dusttrak PM", pm_tsi)
      SubMenu("PM (Dylos)")
        DisplayValue("DC1100 small", dc1100_pm_small)
        DisplayValue("DC1100 large", dc1100_pm_large)
      EndSubMenu
      DisplayValue("LI840A H2O", h2o_licor)
      DisplayValue("2B O3", o3_twob)
      SubMenu("NO/NO2 (2B Tech)")
        DisplayValue("NO2", m405_NO2)
        DisplayValue("NO", m405_NO)
        DisplayValue("NOx", m405_NOx)
        DisplayValue("NO2 zero", m405_NO2_zero)
        DisplayValue("NO zero", m405_NO_zero)
        DisplayValue("Flow factor", m405_flow_factor)
        DisplayValue("Cell tmpr.", m405_cell_T)
        DisplayValue("Cell press.", m405_cell_P)
        DisplayValue("Cell flow", m405_cell_F)
        DisplayValue("Overflow", m405_overflow_F)
        DisplayValue("O3 flow", m405_O3_F)
        DisplayValue("Smp LED V", m405_samp_LED_V)
        DisplayValue("Ref LED V", m405_ref_LED_V)
        DisplayValue("NO gen. V", m405_NO_gen_V)
        DisplayValue("Status", m405_status)
      EndSubMenu
      SubMenu("CH4/CO2/H2O (LGR)")
        DisplayValue("CH4", gga30p_CH4)
        DisplayValue("CO2", gga30p_CO2)
        DisplayValue("H2O", gga30p_H2O)
        DisplayValue("CH4 (dry)", gga30p_CH4_dry)
        DisplayValue("CO2 (dry)", gga30p_CO2_dry)
        DisplayValue("gas press.", gga30p_gas_P)
        DisplayValue("gas tmpr.", gga30p_gas_T)
        DisplayValue("amb. tmpr.", gga30p_amb_T)
        DisplayValue("ringdown 0", gga30p_ringdown0)
        DisplayValue("ringdown 1", gga30p_ringdown1)
        DisplayValue("fit flag", gga30p_fit_flag)
      EndSubMenu
    EndSubMenu
    MenuItem("Test ScadaBR", test_scadabr)
      MenuPick(Cancel, Yes)
  EndSubMenu
EndMenu


'============================= SCADABR INTEGRATION ==================================
Include("CPU:scadabr_Enc.cr3")
Dim scadabr_socket As Long
Dim rtime(9) As Long
Dim scadabr_success As Boolean
Dim scadabr_resp As String * 256
Dim send_report_now As Boolean

Sub send_scadabr_data(payload As String * 900)
  Dim uri As String * 985
  Dim tstamp As String * 18
  RealTime(rtime)
  Sprintf(tstamp,"%04u%02u%02u%02u%02u%02u", rtime(1),rtime(2),rtime(3),rtime(4),rtime(5),rtime(6))
  uri = REPORT_URL & tstamp & payload
  scadabr_socket = HTTPGet(uri, scadabr_resp, "")
  scadabr_success = NOT (scadabr_socket OR Len(scadabr_resp))
EndSub

Sub send_test_ScadaBR()
  send_scadabr_data("&testing=0")
  test_scadabr = False
EndSub

'                1                   2                   3           4
Const REPORT1 = "&dc1100_pm_small=%.1f&dc1100_pm_large=%.1f&pm_tsi=%.3f&co2_licor=%.3f"
'                5              6
Const REPORT2 = "&h2o_licor=%.3f&o3_twob=%.1f"
'                7             8            9             10
Const REPORT3 = "&m405_no2=%.1f&m405_no=%.1f&m405_nox=%.1f&m405_no2_zero=%.1f"
'                11                12                    13               14
Const REPORT4 = "&m405_no_zero=%.1f&m405_flow_factor=%.2f&m405_cell_t=%.1f&m405_cell_p=%.1f"
'                15                   16               17             18
Const REPORT5 = "&m405_overflow_f=%.1f&m405_cell_f=%.1f&m405_o3_f=%.1f&m405_samp_led_v=%.4f"
'                19                  20                 21
Const REPORT6 = "&m405_ref_led_v=%.4f&m405_no_gen_v=%.4f&m405_scrubber_t=%.2f"
'                22              23              24              25
Const REPORT7 = "&gga30p_ch4=%.2f&gga30p_h2o=%.1f&gga30p_co2=%.1f&gga30p_ch4_dry=%.2f"
'                26                  27                28                29
Const REPORT8 = "&gga30p_co2_dry=%.1f&gga30p_gas_p=%.1f&gga30p_gas_t=%.1f&gga30p_amb_t=%.1f"
'                30                    31                    32
Const REPORT9 = "&gga30p_ringdown0=%.4f&gga30p_ringdown1=%.4f&gga30p_fit_flag=%.1f"
Sub send_telemetry_report()
  Dim msg1 As String * 100, msg2 As String * 100, msg3 As String * 100
  Dim msg4 As String * 100, msg5 As String * 100, msg6 As String * 100
  Dim msg7 As String * 100, msg8 As String * 100, msg9 As String * 100
  Dim payload As String * 900
  Sprintf(msg1,REPORT1,t(1),t(2),t(3),t(4))
  Sprintf(msg2,REPORT2,t(5),t(6))
  Sprintf(msg3,REPORT3,t(7),t(8),t(9),t(10))
  Sprintf(msg4,REPORT4,t(11),t(12),t(13),t(14))
  Sprintf(msg5,REPORT5,t(15),t(16),t(17),t(18))
  Sprintf(msg6,REPORT6,t(19),t(20),t(21))
  Sprintf(msg7,REPORT7,t(22),t(23),t(24),t(25))
  Sprintf(msg8,REPORT8,t(26),t(27),t(28),t(29))
  Sprintf(msg9,REPORT9,t(30),t(31),t(32))
  payload = msg1 & msg2 & msg3 & msg4 & msg5 & msg6 & msg7 & msg8 & msg9
  send_scadabr_data(payload)
EndSub


'================================ FUNCTIONS =================================
Function convert_dc1100_value(number) As Float
  'counts/100 per cubic foot => counts per cubic meter
  Return INT(number * 100 * FT3_PER_M3)
EndFunction


'============================== SUBROUTINES =================================
Sub setup()
  SerialOpen(DYLOS_COM,DYLOS_BAUD,DYLOS_FMT,0,DYLOS_BUFF)
  SerialOpen(NOX_COM,NOX_BAUD,NOX_FMT,0,NOX_BUFF)
  SerialOpen(CH4_COM,CH4_BAUD,CH4_FMT,0,CH4_BUFF)
EndSub


'========================= MAIN PROGRAM =====================================
BeginProg
  setup()

  Scan(500,mSec,SCAN_BUFF,0)
    VoltDiff(pm_tsi,1,mv5000,DF_TSI_PM,True,0,INTEG,TSI_PM_MLT,TSI_PM_OFF)
    VoltDiff(co2_licor,1,mv5000,DF_LICOR_CO2,True,0,INTEG,LICOR_CO2_MLT,LICOR_CO2_OFF)
    VoltDiff(h2o_licor,1,mv5000,DF_LICOR_H2O,True,0,INTEG,LICOR_H2O_MLT,LICOR_H2O_OFF)
    VoltDiff(o3_twob,1,mv5000,DF_TWOB_O3,True,0,INTEG,TWOB_O3_MLT,TWOB_O3_OFF)

    SerialIn(ch4_record,CH4_COM,5,&h0A,CH4_BUFF)
    If (Len(ch4_record)) Then
      SplitStr(ch4(1),ch4_record,", ",25,6)
      'HACK - verify message parsed properly by verifying year value against
      '       current year. won't work next year, or if analyzer's time is
      '       not set correctly!
      ch4_year = ch4(1) 'convert string->float
      disable_gga30p = NOT(ch4_year = 2015)
      gga30p_gas_P *= MBAR_PER_TORR
    EndIf
  NextScan

  SlowSequence
  Scan(1,min,1,0)
    SerialIn(dc1100_record,DYLOS_COM,100,&h0D,DYLOS_BUFF)
    If (Len(dc1100_record)) Then
      SplitStr(dc1100_vals(1),dc1100_record,"",2,0)
      If (dc1100_vals(1)=NAN OR dc1100_vals(2)=NAN) Then
        dc1100_pm_small = NAN
        dc1100_pm_large = NAN
      Else
        dc1100_pm_small = convert_dc1100_value(dc1100_vals(1))
        dc1100_pm_large = convert_dc1100_value(dc1100_vals(2))
      EndIf
    EndIf

    SerialIn(nox_record,NOX_COM,100,&h0D,NOX_BUFF)
    If (Len(nox_record)) Then
      SplitStr(nox(1),nox_record,"",22,0)
      'TODO detect bad input
    EndIf

    CallTable(tsdata)
    CallTable(stats)
  NextScan

  SlowSequence
  Scan(1,Sec,2,0)
    If (test_scadabr) Then
      send_test_ScadaBR()
    EndIf
    
    CallTable(telemetry)
    If (telemetry.Output(1,1)) Then
      GetRecord(t(1),telemetry,1)
      send_telemetry_report()
    EndIf
  NextScan
EndProg

