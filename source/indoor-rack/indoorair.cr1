 ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Data acquistion program for indoor air rack
' Indoor Air Quality and Climate Change study (2015-2016)
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'update before deployment but DO NOT check-in other than empty string!
Const VERSION = ""

'uniquely identify this location/datalogger
Const STATION = "indoorair"
'version-stamped name for data file headers
Const SELF = STATION & "(" & VERSION & ")"

Const DF_TSI_PM = 4
Const TSI_PM_OFF = 0
Const TSI_PM_MLT = (1.0 - TSI_PM_OFF)/5000 '0-1.0 mg/m^3, 0-5V

Const DYLOS_COM = Com1
Const DYLOS_BAUD = 9600
Const DYLOS_FMT = 19 '8/n/1, TTL logic
Const DYLOS_BUFF = 12

Const LI840A_COM = Com2
Const LI840A_BAUD = 9600
Const LI840A_FMT = 3 '8/n/1, RS232 logic
Const LI840A_REC = 350
Const LI840A_BUFF = LI840A_REC*2 + 1

Const DF_TYPE_K = 8

Const DF_CO = 2
Const DF_NO = 1
Const DF_O3 = 3

'Scaling from Maddy Fuch's assessment (ppb/mV, ppb):
Const CO_MLT = 2.425
Const CO_OFF = -797
Const NO_MLT = 1.475
Const NO_OFF = -569
Const O3_MLT = 2.511
Const O3_OFF = -764

'============================== INTERNALS ===================================
Const INTEG = 250
Const DAYS_OF_DATA = 14 'saved to CPU

Const FT3_PER_M3 = 35.314667
Const MBAR_PER_TORR = 1.3332237
Const MBAR_PER_KPA = 10

Public debug_on As Boolean

Const NTP_ADDR = "0.us.pool.ntp.org"
Const NTP_OFFSET = -8*3600 'sec from UTC = PST
Const NTP_DEV = 100 'ms, tolerable drift
Dim clock_drift
Units clock_drift = ms

Dim dusttrak2_analog_pm25
Units dusttrak2_analog_pm25 = mg/m^3

Dim dc1100_record As String * 12
Dim dc1100_size_ratio
Dim dc1100_vals(2)
'dc1100_vals(1) = "small" counts / 100 ft^3
'dc1100_vals(2) = "large" counts / 100 ft^3
Dim dc1100(2)
Alias dc1100(1) = dc1100_pm_small
Alias dc1100(2) = dc1100_pm_large
Units dc1100_pm_small = counts/m^3
Units dc1100_pm_large = counts/m^3

Dim li840a_record As String * LI840A_REC
Dim li840a(32)
'HINT dumb-parsing method ("on non-numeric") also catches numbers within XML tag names
'(1) <li840>
Alias li840a(2) = li840a_cell_T
Alias li840a(3) = li840a_cell_P 'read as kPa, converted to mbar
'(4) <co2>
Alias li840a(5) = li840a_CO2
'(6) </co2>
'(7) <co2abs>
'(8) CO2 absorbance value
'(9) </co2abs>
'(10) <h2o>
Alias li840a(11) = li840a_H2O
'(12) </h2o>
'(13) <h2oabs>
'(14) H2O absorbance value
'(15) </h2oabs>
'(16) <h2odewpoint>
Alias li840a(17) = li840a_dew_T
'(18) </h2odewpoint>
Alias li840a(19) = li840a_pwr_src
'(20) <co2> (raw)
'(21) raw CO2 number
'(22) </co2>
'(23) <co2ref>
'(24) raw CO2 ref. number
'(25) </co2ref>
'(26) <h2o>
'(27) raw H2O number
'(28) </h2o>
'(29) <h2oref>
'(30) raw H2O number
'(31) </h2oref>
'(32) </li840a>
Units li840a_cell_T = degC
Units li840a_cell_P = mbar
Units li840a_CO2 = ppmv
Units li840a_H2O = ppthv
Units li840a_dew_T = degC
Units li840a_pwr_src = Vdc

Dim typeK_amb_T
Dim logger_panel_T
Units typeK_amb_T = degC
Units logger_panel_T = degC

'Dim cr3k_lithium_battery
'Units cr3k_lithium_battery = Volts

Dim alphasense(3)
Alias alphasense(1) = B4_CO_mV
Alias alphasense(2) = B4_NO_mV
Alias alphasense(3) = B4_O3_mV
Units alphasense = mV

Dim alphafixme(3)
Alias alphafixme(1) = B4_CO_est
Alias alphafixme(2) = B4_NO_est
Alias alphafixme(3) = B4_O3_est
Units alphafixme = ppbv

Dim inbetween_1min_scan As Boolean
Dim just_had_1min_scan As Boolean
'Dim time_for_telemetry_report As Boolean


'============================ DATA TABLES ===================================
DataTable(tsdata,True,1440)
  DataInterval(0,1,min,5)
'  CardOut(0,1440*DAYS_OF_DATA)
'  Average(1,dusttrak2_analog_pm25,IEEE4,dusttrak2_analog_pm25=NAN)
'    FieldNames("dusttrak2_analog_pm25")
  Sample(2,dc1100,IEEE4)
  Average(1,li840a_CO2,IEEE4,li840a_CO2=NAN)
    FieldNames("li840a_CO2")
  Average(1,li840a_H2O,IEEE4,li840a_H2O=NAN)
    FieldNames("li840a_H2O")
  Average(1,li840a_cell_T,IEEE4,li840a_cell_T=NAN)
    FieldNames("li840a_cell_T")
  Average(1,li840a_cell_P,IEEE4,li840a_cell_P=NAN)
    FieldNames("li840a_cell_P")
  Average(1,li840a_dew_T,IEEE4,li840a_dew_T=NAN)
    FieldNames("li840a_dew_T")
  Average(1,li840a_pwr_src,IEEE4,li840a_pwr_src=NAN)
    FieldNames("li840a_pwr_src")
  Average(1,typeK_amb_T,FP2,typeK_amb_T=NAN)
    FieldNames("typeK_amb_T")
  Average(1,logger_panel_T,FP2,logger_panel_T=NAN)
    FieldNames("logger_panel_T")
EndTable

DataTable(stats,True,48) '1 week
  DataInterval(0,30,min,1)
'  CardOut(0,48*DAYS_OF_DATA)
'  Average(1,dusttrak2_analog_pm25,IEEE4,dusttrak2_analog_pm25=NAN)
  Average(1,dc1100_pm_small,IEEE4,inbetween_1min_scan OR dc1100_pm_small=NAN)
  Average(1,dc1100_pm_large,IEEE4,inbetween_1min_scan OR dc1100_pm_large=NAN)
  Average(1,li840a_CO2,IEEE4,li840a_CO2=NAN)
  Average(1,li840a_H2O,IEEE4,li840a_H2O=NAN)
  Average(1,li840a_cell_T,IEEE4,li840a_cell_T=NAN)
  Average(1,li840a_cell_P,IEEE4,li840a_cell_P=NAN)
  Average(1,li840a_dew_T,IEEE4,li840a_dew_T=NAN)
  Average(1,typeK_amb_T,FP2,typeK_amb_T=NAN)
  Average(1,logger_panel_T,FP2,logger_panel_T=NAN)
EndTable

'HINT - segregate these 'prototype' sensors until solid
'calibration curve is derived; ultimately, will probably
'be integrated into CO2 tracer detection network package
DataTable(B4_sensors,True,1440)
  DataInterval(0,1,Min,5)
  'CardOut(0,-1)
  Average(1,B4_CO_mV,IEEE4,B4_CO_mV=NAN)
  Average(1,B4_NO_mV,IEEE4,B4_NO_mV=NAN)
  Average(1,B4_O3_mV,IEEE4,B4_O3_mV=NAN)
  Average(1,B4_CO_est,IEEE4,B4_CO_est=NAN)
  Average(1,B4_NO_est,IEEE4,B4_NO_est=NAN)
  Average(1,B4_O3_est,IEEE4,B4_O3_est=NAN)
EndTable

DataTable(debug,True,1)
  Sample(1,dusttrak2_analog_pm25,IEEE4)
  Sample(1,dc1100_record,String)
  Sample(2,dc1100(1),IEEE4)
  Sample(1,li840a_record,String)
  Sample(32,li840a(1),IEEE4)
  Sample(1,typeK_amb_T,IEEE4)
  Sample(1,logger_panel_T,IEEE4)
  Sample(1,B4_CO_mV,IEEE4)
  Sample(1,B4_NO_mV,IEEE4)
  Sample(1,B4_O3_mV,IEEE4)
'  Sample(1,smtp_response,String)
  Sample(1,scadabr_resp,String)
  Sample(1,scadabr_success,Boolean)
  Sample(1,clock_drift,IEEE4)
EndTable


'================================== MENU ====================================
Const Yes = True
Const Cancel = False
Const No = False

'Public test_email As Boolean
Public test_scadabr As Boolean

DisplayMenu("Indoor AQ", -1)
  SubMenu("Debug")
    SubMenu("Monitor sensors")
      DisplayValue("TypeK tmpr.", typeK_amb_T)
      DisplayValue("Panel tmpr.", logger_panel_T)
      DisplayValue("Dusttrak PM", dusttrak2_analog_pm25)
      SubMenu("PM (Dylos)")
        DisplayValue("DC1100 small", dc1100_pm_small)
        DisplayValue("DC1100 large", dc1100_pm_large)
      EndSubMenu
      SubMenu("CO2/H2O (Licor)")
        DisplayValue("CO2", li840a_CO2)
        DisplayValue("H2O", li840a_H2O)
        DisplayValue("Cell tmpr.", li840a_cell_T)
        DisplayValue("Cell press.", li840a_cell_P)
        DisplayValue("Dewpoint", li840a_dew_T)
        DisplayValue("Power in", li840a_pwr_src)
      EndSubMenu
      SubMenu("CO/NO/O3 (Alphasense")
        DisplayValue("CO (mV)", B4_CO_mV)
        DisplayValue("CO (ppb)",B4_CO_est)
        DisplayValue("NO (mV)", B4_NO_mV)
        DisplayValue("NO (ppb)",B4_NO_est)
        DisplayValue("O3 (mV)", B4_O3_mV)
        DisplayValue("O3 (ppb)",B4_O3_est)
      EndSubMenu
    EndSubMenu
    MenuItem("Debug  ON", debug_on)
      MenuPick(No,Yes)
'    MenuItem("Test email", test_email)
'      MenuPick(Cancel, Yes)
    MenuItem("Test ScadaBR", test_scadabr)
      MenuPick(Cancel, Yes)
  EndSubMenu
EndMenu


'================================ EMAIL ====================================
'Include "CPU:email_Enc.cr3"  'contains non-public settings
'Const CRLF = CHR(13) & CHR(10)
'Dim smtp_response As String * 80
'Dim email_failed As Boolean
'
'Const email_boot_subject = "Start-up notice from " & STATION & " CR3000"
'Sub send_startup_email()
'  Dim msg As String * 512
'  msg = ("This is the " & STATION & " CR3000. Starting up..." & CRLF & CRLF)
'  'HINT both CompileResults and CardStatus come with a trailing <CR><LF> but 
'  'CardStatus has a CRLF pair in the middle which must be stripped out
'  msg &= "Compile results: " & RTrim(Status.CompileResults(1))
'  msg &= "Card status: " & RTrim(Replace(Status.CardStatus(1), CRLF, " "))
'  msg &= CRLF & "Program error count: " & Status.ProgErrors & CRLF
'  msg &= "Watchdog error count: " & Status.WatchdogErrors & CRLF
'  msg &= "Run signature: " & Status.RunSignature & CRLF
'  msg &= "Program signature: " & Status.ProgSignature & CRLF
'  msg &= "Power input (Volts): " & Status.Battery & CRLF
'  msg &= "Git tag: " & SELF & CRLF
'  EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,email_boot_subject,msg,"", _
'      SMTP_USER,SMTP_PASS,smtp_response)
'EndSub
'
'Const email_test_subject = "Test email from " & SELF & " CR3000"
'Const email_test_message = "This is the " & SELF & " CR3000. Testing 1.. 2.. 3.." & CRLF
'Sub send_test_email()
'  EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,email_test_subject,email_test_message,"", _
'      SMTP_USER,SMTP_PASS,smtp_response)
'  test_email = False
'EndSub
'
'Const EMAIL_DAILY_SUBJECT = "Daily notice from " & STATION & " CR3000"
'Sub send_daily_email()
'  Dim msg As String * 512
'  msg = "Good morning, it's the " & STATION & " CR3000. Yesterday's data "
'  msg &= "files are attached. [" & VERSION & "]"
'  Dim ok As Boolean
'  ok = EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,EMAIL_DAILY_SUBJECT,msg, _
'         "",SMTP_USER,SMTP_PASS,smtp_response)
'  email_failed = NOT ok
'EndSub


'============================= SCADABR INTEGRATION ==================================
Include("CPU:scadabr_Enc.cr1")
Dim scadabr_socket As Long
Dim rtime(9) As Long
Dim scadabr_success As Boolean
Dim scadabr_resp As String * 256

Sub send_scadabr_data(payload As String * 1000)
  Dim uri As String * 1085
  Dim tstamp As String * 18
  RealTime(rtime)
  Sprintf(tstamp,"%04u%02u%02u%02u%02u%02u", rtime(1),rtime(2),rtime(3),rtime(4),rtime(5),rtime(6))
  uri = REPORT_URL & tstamp & payload
  scadabr_socket = HTTPGet(uri, scadabr_resp, "")
  scadabr_success = NOT (scadabr_socket OR Len(scadabr_resp))
EndSub

Sub send_test_ScadaBR()
  send_scadabr_data("&testing=0")
  test_scadabr = False
EndSub

'                1                          2                    3
Const REPORT1 = "&dusttrak2_analog_pm25=%.3f&dc1100_pm_small=%.1f&dc1100_pm_large=%.1f"
'                4               5               6                  7
Const REPORT2 = "&li840a_co2=%.1f&li840a_h2o=%.1f&li840a_cell_t=%.1f&li840a_cell_p=%.1f"
'                8                 9                   10               11
Const REPORT3 = "&li840a_dew_t=%.1f&li840a_pwr_src=%.1f&typek_amb_t=%.1f&logger_panel_t=%.1f"
Sub send_telemetry_report()
  Dim msg1 As String * 100, msg2 As String * 100, msg3 As String * 100
  Dim payload As String * 300
  Sprintf(msg1,REPORT1,dusttrak2_analog_pm25,dc1100_pm_small,dc1100_pm_large)
  Sprintf(msg2,REPORT2,li840a_CO2,li840a_H2O,li840a_cell_T,li840a_cell_P)
  Sprintf(msg3,REPORT3,li840a_pwr_src,typeK_amb_T,logger_panel_T)
  payload = msg1 & msg2 & msg3
  send_scadabr_data(payload)
EndSub

'HINT - just send most recent value instead of 5-min mean,
'since that would require a fair amount of infrastructure
'and time-series data is already emailed daily
Sub send_alphasensors_report()
  Dim msg1 As String * 64, msg2 As String * 64
  Sprintf(msg1,"&b4_co_mv=%.1f&b4_no_mv=%.1f&b4_o3_mv=%.1f",B4_CO_mV,B4_NO_mV,B4_O3_mV)
  Sprintf(msg2,"&b4_co_est=%.1f&b4_no_est=%.1f&b4_o3_est=%.1f", B4_CO_est,B4_NO_est,B4_O3_est)
  send_scadabr_data(msg1 & msg2)
EndSub


'================================ FUNCTIONS =================================
Function convert_dc1100_value(number) As Float
  'counts/100 per cubic foot => counts per cubic meter
  Return INT(number * 100 * FT3_PER_M3)
EndFunction


'============================== SUBROUTINES =================================
Sub setup()
  SerialOpen(DYLOS_COM,DYLOS_BAUD,DYLOS_FMT,0,DYLOS_BUFF)
  SerialOpen(LI840A_COM,LI840A_BAUD,LI840A_FMT,0,LI840A_BUFF)
  Move(dc1100_vals(1),2,NAN,1) 'HACK ensure serial dest vars begin @ NAN to prevent
  Move(li840a(1),32,NAN,1)         'inclusion of 0 in first averages produced
EndSub


'========================= MAIN PROGRAM =====================================
BeginProg
  SetStatus("StationName", SELF)
'  send_startup_email()
  setup()

  'HINT - Licor LI840A CO2/H2O analyzer sends messages at
  '       not precisely 1Hz... run twice as fast to avoid losing messages.
  Scan(500,mSec,1,0)
    VoltDiff(dusttrak2_analog_pm25,1,mv5000,DF_TSI_PM,True,0,INTEG,TSI_PM_MLT,TSI_PM_OFF)
    PanelTemp(logger_panel_T,INTEG)
    TCDiff(typeK_amb_T,1,mV25,DF_TYPE_K,TypeK,logger_panel_T,1,0,INTEG,1,0)

    SerialIn(li840a_record,LI840A_COM,5,&h0A,LI840A_BUFF)
    If (Len(li840a_record)) Then
      SplitStr(li840a(1),li840a_record,"",32,0)
      If (li840a(1)=840 AND li840a(32)=840) Then
        li840a_cell_P *= MBAR_PER_KPA
      Else
        Move(li840a(1),32,NAN,1)
        SerialFlush(LI840A_COM)
      EndIf
    EndIf

    VoltDiff(B4_CO_mV,1,mv5000,DF_CO,True,0,INTEG,1,0) 'in mV
    VoltDiff(B4_NO_mV,1,mv5000,DF_NO,True,0,INTEG,1,0) 'FIXME
    VoltDiff(B4_O3_mV,1,mv5000,DF_O3,True,0,INTEG,1,0)
    B4_CO_est = B4_CO_mV*CO_MLT + CO_OFF
    B4_NO_est = B4_NO_mV*NO_MLT + NO_OFF
    B4_O3_est = B4_O3_mV*O3_MLT + O3_OFF
    CallTable(B4_sensors)

    CallTable(tsdata)
    CallTable(stats)
    If TimeIntoInterval(0,60,Sec) Then 
      send_telemetry_report()
      send_alphasensors_report()
    EndIf

    inbetween_1min_scan = True
    If (just_had_1min_scan) Then
      just_had_1min_scan = False
      inbetween_1min_scan = False
    EndIf
'  NextScan
'
'  SlowSequence
'  Scan(1,Min,1,0)
  If TimeIntoInterval(0,1,Min) Then
    SerialIn(dc1100_record,DYLOS_COM,100,&h0D,DYLOS_BUFF)
    If (Len(dc1100_record)) Then
      SplitStr(dc1100_vals(1),dc1100_record,"",2,0)
      If (dc1100_vals(1)=NAN OR dc1100_vals(2)=NAN) Then
        dc1100_pm_small = NAN
        dc1100_pm_large = NAN
      Else
        dc1100_pm_small = convert_dc1100_value(dc1100_vals(1))
        dc1100_pm_large = convert_dc1100_value(dc1100_vals(2))
      EndIf
      SerialFlush(DYLOS_COM)
    EndIf

    just_had_1min_scan = True
'  NextScan
  EndIf
    
'  SlowSequence
'  Scan(1,Sec,1,0)
    If (debug_on) Then CallTable(debug)
    If (test_scadabr) Then
      send_test_scadabr()
    EndIf
'    If (test_email) Then
'      send_test_email()
'    EndIf
'
'    If TimeIntoInterval(360,1440,Min) Then '6 AM
'      send_daily_email()
'    ElseIf TimeIntoInterval(375, 1440, Min) Then
'      If (email_failed) Then send_daily_email()
'    ElseIf TimeIntoInterval(390, 1440, Min) Then
'      If (email_failed) Then send_daily_email()
'      email_failed = False 'give up until tomorrow
'    EndIf

    If TimeIntoInterval(0,10,Min) Then
      clock_drift = NetworkTimeProtocol(NTP_ADDR,NTP_OFFSET,NTP_DEV)
      send_scadabr_data(FormatFloat(clock_drift,"&clock_drift=%f"))
    EndIf
  NextScan
EndProg

