''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Data acquistion program for outdoor air rack
' Indoor Air Quality and Climate Change study (2015-2016)
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'update before deployment but DO NOT check-in other than empty string!
Const VERSION = ""

'uniquely identify this location/datalogger
Const STATION = "outdoorair"
'version-stamped name for data file headers
Const SELF = STATION & "(" & VERSION & ")"

Const DF_TSI_PM = 8
Const TSI_PM_OFF = 0
Const TSI_PM_MLT = (1.0 - TSI_PM_OFF)/5000 '0-1.0 mg/m^3, 0-5V

Const DYLOS_COM = Com4
Const DYLOS_BAUD = 9600
Const DYLOS_FMT = 19 '8/n/1, TTL logic
Const DYLOS_BUFF = 12

Const DF_CO = 5
Const CO_OFF = 0
Const CO_MLT = (2000.0 - CO_OFF)/10000 '0-2000 ppb over 0-10V

Const DF_NOX = 12
Const DF_NO = 13
Const DF_NO2 = 14
Const NOX_OFF = 0
Const NOX_MLT = (200.0 - NOX_OFF)/10000 '200 ppb over 0-10V

'Const CH4_COM = Com3
'Const CH4_BAUD = 19200
'Const CH4_FMT = 19 '8/n/1, TTL logic
'Const CH4_BUFF = 800

Const DF_O3 = 6
Const O3_OFF = 0
Const O3_MLT = (500.0 - O3_OFF)/10000 '500 ppb over 0-10V

Const LI840A_COM = Com2
Const LI840A_BAUD = 9600
Const LI840A_FMT = 3 '8/n/1, RS232 logic
Const LI840A_REC = 120
Const LI840A_BUFF = LI840A_REC*2 + 1

Const DF_TYPE_T = 7

Const CAO_SMP_VLV = 2 'sample source: indoor/outdoor
Const CAO_ZERO = 1    'auto-zero trigger (PTR-MS/etc)

Const ZERO_INTV = 480   'every 8 hours
Const ZERO_OFF = 158    'wait 2-1/2 hrs plus 1/2 interval = 2:38a, 10:38a, 18:38p
Const ZERO_DUR = 15      'zero for 15 minutes (across two half intervals)
'Const ZERO_INTV = 120  'DEBUG
'Const ZERO_OFF = 71
'Const ZERO_DUR = 7


'============================== INTERNALS ===================================
Const INTEG = 250
Const DAYS_OF_DATA = 14 'saved to CPU

Const FT3_PER_M3 = 35.314667
Const MBAR_PER_TORR = 1.3332237
Const MBAR_PER_KPA = 10

Public debug_on As Boolean

Const NTP_ADDR = "0.us.pool.ntp.org"
Const UTC_OFFSET = -8*3600 'sec from UTC = PST
Const NTP_DEV = 100 'ms, tolerable drift
Dim NTP_offset
Units NTP_offset = ms

Dim dusttrak2_analog_pm25
Units dusttrak2_analog_pm25 = mg/m^3

Dim dc1100_record As String * 12
Dim dc1100_size_ratio
Dim dc1100_vals(2)
'dc1100_vals(1) = "small" counts / 100 ft^3
'dc1100_vals(2) = "large" counts / 100 ft^3
Dim dc1100(2)
Alias dc1100(1) = dc1100_pm_small
Alias dc1100(2) = dc1100_pm_large
Units dc1100_pm_small = counts/m^3
Units dc1100_pm_large = counts/m^3

Dim co(1)
Alias co(1) = t300_CO
Units t300_CO = ppbv

Dim o3(1)
Alias o3(1) = t400_O3
Units t400_O3 = ppbv

Dim nox(3)
Alias nox(1) = t200_NO2
Alias nox(2) = t200_NO
Alias nox(3) = t200_NOx
Units nox = ppbv

'Dim disable_ugga As Boolean
'Dim ch4_record As String * 400
'Dim ch4_year
'Dim ch4(25)
''1: date (only year captured)   '2: time (only hour captured)
'Alias ch4(3)  = ugga_CH4        '4: CH4 s.d.
'Alias ch4(5)  = ugga_H2O        '6: H2O s.d.
'Alias ch4(7)  = ugga_CO2        '8: CO2 s.d.
'Alias ch4(9)  = ugga_CH4_dry    '10: CH4 dry s.d.
'Alias ch4(11) = ugga_CO2_dry    '12: CO2 dry s.d.
'Alias ch4(13) = ugga_gas_P      '14: gas P s.d.
'Alias ch4(15) = ugga_gas_T      '16: gas T s.d.
'Alias ch4(17) = ugga_self_T     '18: self T s.d.
'Alias ch4(19) = ugga_ringdown0  '20: ringdown #0 s.d.
'Alias ch4(21) = ugga_ringdown1  '22: ringdown #1 s.d.
'Alias ch4(23) = ugga_fit_flag   '24: MIU valve
''25: MIU description
'Units ugga_CH4 = ppmv
'Units ugga_H2O = ppthv
'Units ugga_CO2 = ppmv
'Units ugga_CH4_dry = ppmv
'Units ugga_CO2_dry = ppmv
'Units ugga_gas_P = mbar
'Units ugga_gas_T = degC
'Units ugga_self_T = degC
'Units ugga_ringdown0 = usec
'Units ugga_ringdown1 = usec
'Units ugga_fit_flag = arb

Dim li840a_config As String * 300
Dim li840a_resp As String * 32
Dim li840a_record As String * LI840A_REC
Dim li840a(6)
Alias li840a(1) = li840a_cell_T
Alias li840a(2) = li840a_cell_P
Alias li840a(3) = li840a_CO2
Alias li840a(4) = li840a_pwr_src
Alias li840a(5) = li840a_H2O
Alias li840a(6) = li840a_dewpoint
Units li840a_cell_T = degC
Units li840a_cell_P = kPa
Units li840a_CO2 = ppm
Units li840a_pwr_src = Vdc
Units li840a_H2O = ppth
Units li840a_dewpoint = degC

Dim typeT_sample_T
Dim logger_self_T
Units typeT_sample_T = degC
Units logger_self_T = degC

Dim cr3k_lithium_battery
Units cr3k_lithium_battery = Volts

Dim ctrl_smp_vlv
Dim ctrl_ptr_zero
Dim is_sampling_indoor As Boolean
Dim tflag As Boolean 'transition flag
Dim is_zeroing_PTRMS As Boolean

Dim rtime(9) As Long


'============================ DATA TABLES ===================================
DataTable(tsdata,True,1440*DAYS_OF_DATA)
  DataInterval(0,1,min,5)
  Sample(1,is_sampling_indoor,Boolean)
  Sample(1,tflag,Boolean)
    FieldNames("transition_flag")
  Sample(1,is_zeroing_PTRMS,Boolean)
  Sample(2,dc1100,IEEE4)
  Average(1,t300_CO,FP2,t300_CO=NAN)
    FieldNames("t300_CO")
  Average(1,t400_O3,FP2,t400_O3=NAN)
    FieldNames("t400_O3")
  Average(1,t200_NO2,FP2,t200_NO2=NAN)
    FieldNames("t200_NO2")
  Average(1,t200_NO,FP2,t200_NO=NAN)
    FieldNames("t200_NO")
  Average(1,t200_NOx,FP2,t200_NOx=NAN)
    FieldNames("t200_NOx")
'  Average(1,ugga_CH4,FP2,disable_ugga OR ugga_CH4=NAN)
'    FieldNames("ugga_CH4")
'  Average(1,ugga_H2O,IEEE4,disable_ugga OR ugga_H2O=NAN)
'    FieldNames("ugga_H2O")
'  Average(1,ugga_CO2,FP2,disable_ugga OR ugga_CO2=NAN)
'    FieldNames("ugga_CO2")
'  Average(1,ugga_CH4_dry,FP2,disable_ugga OR ugga_CH4_dry=NAN)
'    FieldNames("ugga_CH4_dry")
'  Average(1,ugga_CO2_dry,FP2,disable_ugga OR ugga_CO2_dry=NAN)
'    FieldNames("ugga_CO2_dry")
'  Average(1,ugga_gas_P,IEEE4,disable_ugga OR ugga_gas_P=NAN)
'    FieldNames("ugga_gas_P")
'  Average(1,ugga_gas_T,FP2,disable_ugga OR ugga_gas_T=NAN)
'    FieldNames("ugga_gas_T")
'  Average(1,ugga_self_T,FP2,disable_ugga OR ugga_self_T=NAN)
'    FieldNames("ugga_self_T")
'  Average(1,ugga_fit_flag,FP2,disable_ugga OR ugga_fit_flag=NAN)
'    FieldNames("ugga_fit_flag")
  Average(1,li840a_CO2,FP2,li840a_CO2=NAN)
    FieldNames("li840a_CO2")
  Average(1,li840a_H2O,FP2,li840a_H2O=NAN)
    FieldNames("li840a_H2O")
  Average(1,li840a_cell_T,FP2,li840a_cell_T=NAN)
    FieldNames("li840a_cell_T")
  Average(1,li840a_cell_P,IEEE4,li840a_cell_P=NAN)
    FieldNames("li840a_cell_P")
  Average(1,li840a_dewpoint,FP2,li840a_dewpoint=NAN)
    FieldNames("li840a_dewpoint")
  Average(1,li840a_pwr_src,FP2,li840a_pwr_src=NAN)
    FieldNames("li840a_pwr_src")
  Average(1,typeT_sample_T,FP2,typeT_sample_T=NAN)
    FieldNames("typeT_sample_T")
  Average(1,logger_self_T,FP2,logger_self_T=NAN)
    FieldNames("logger_self_T")
EndTable

DataTable(debug,True,1)
  Sample(1,dusttrak2_analog_pm25,IEEE4)
  Sample(1,co(1),IEEE4)
  Sample(1,o3(1),IEEE4)
  Sample(3,nox(1),IEEE4)
'  Sample(1,ch4_record,String)
'  Sample(25,ch4(1),IEEE4)
'  Sample(1,disable_ugga,Boolean)
  Sample(1,li840a_record,String)
  Sample(6,li840a(1),IEEE4)
  Sample(1,typeT_sample_T,IEEE4)
  Sample(1,logger_self_T,IEEE4)
'  Sample(1,smtp_response,String)
  Sample(1,NTP_offset,IEEE4)
  Sample(1,ctrl_smp_vlv,IEEE4)
  Sample(1,ctrl_ptr_zero,IEEE4)
  Sample(1,is_sampling_indoor,Boolean)
  Sample(1,tflag,Boolean)
  Sample(1,is_zeroing_PTRMS,Boolean)
EndTable


'================================== MENU ====================================
Const Yes = True
Const Cancel = False
Const No = False

'Public test_email As Boolean

DisplayMenu("Indoor AQ", -1)
  SubMenu("Debug")
    SubMenu("Monitor sensors")
      DisplayValue("TypeT tmpr.", typeT_sample_T)
      DisplayValue("Panel tmpr.", logger_self_T)
      DisplayValue("Dusttrak PM", dusttrak2_analog_pm25)
      SubMenu("PM (Dylos)")
        DisplayValue("DC1100 small", dc1100_pm_small)
        DisplayValue("DC1100 large", dc1100_pm_large)
      EndSubMenu
      SubMenu("Teledyne API")
        DisplayValue("CO", t300_CO)
        DisplayValue("O3", t400_O3)
        DisplayValue("NO2", t200_NO2)
        DisplayValue("NO", t200_NO)
        DisplayValue("NOx", t200_NOx)
      EndSubMenu
'      SubMenu("CH4/CO2/H2O (LGR)")
'        DisplayValue("CH4", ugga_CH4)
'        DisplayValue("CO2", ugga_CO2)
'        DisplayValue("H2O", ugga_H2O)
'        DisplayValue("CH4 (dry)", ugga_CH4_dry)
'        DisplayValue("CO2 (dry)", ugga_CO2_dry)
'        DisplayValue("gas press.", ugga_gas_P)
'        DisplayValue("gas tmpr.", ugga_gas_T)
'        DisplayValue("self tmpr.", ugga_self_T)
'        DisplayValue("ringdown 0", ugga_ringdown0)
'        DisplayValue("ringdown 1", ugga_ringdown1)
'        DisplayValue("fit flag", ugga_fit_flag)
'      EndSubMenu
      SubMenu("CO2/H2O (Licor)")
        DisplayValue("CO2", li840a_CO2)
        DisplayValue("H2O", li840a_H2O)
        DisplayValue("Cell tmpr.", li840a_cell_T)
        DisplayValue("Cell press.", li840a_cell_P)
        DisplayValue("Dewpoint", li840a_dewpoint)
        DisplayValue("Power in", li840a_pwr_src)
      EndSubMenu
    EndSubMenu
    MenuItem("Debug  ON", debug_on)
      MenuPick(No,Yes)
'    MenuItem("Test email", test_email)
'      MenuPick(Cancel, Yes)
    DisplayValue("Indoor air?", is_sampling_indoor)
    DisplayValue("Zero PTRMS?", is_zeroing_PTRMS)
  EndSubMenu
EndMenu


''================================ EMAIL ====================================
'Include "CPU:email_Enc.cr3"  'contains non-public settings
'Const CRLF = CHR(13) & CHR(10)
'Dim smtp_response As String * 80
'Dim email_failed As Boolean
'
'Const email_boot_subject = "Start-up notice from " & STATION & " CR3000"
'Sub send_startup_email()
'  Dim msg As String * 512
'  msg = ("This is the " & STATION & " CR3000. Starting up..." & CRLF & CRLF)
'  'HINT both CompileResults and CardStatus come with a trailing <CR><LF> but 
'  'CardStatus has a CRLF pair in the middle which must be stripped out
'  msg &= "Compile results: " & RTrim(Status.CompileResults(1))
'  msg &= "Card status: " & RTrim(Replace(Status.CardStatus(1), CRLF, " "))
'  msg &= CRLF & "Program error count: " & Status.ProgErrors & CRLF
'  msg &= "Watchdog error count: " & Status.WatchdogErrors & CRLF
'  msg &= "Run signature: " & Status.RunSignature & CRLF
'  msg &= "Program signature: " & Status.ProgSignature & CRLF
'  msg &= "Power input (Volts): " & Status.Battery & CRLF
'  msg &= "Git tag: " & SELF & CRLF
'  EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,email_boot_subject,msg,"", _
'      SMTP_USER,SMTP_PASS,smtp_response)
'EndSub
'
'Const email_test_subject = "Test email from " & SELF & " CR3000"
'Const email_test_message = "This is the " & SELF & " CR3000. Testing 1.. 2.. 3.." & CRLF
'Sub send_test_email()
'  EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,email_test_subject,email_test_message,"", _
'      SMTP_USER,SMTP_PASS,smtp_response)
'  test_email = False
'EndSub
'
'Const EMAIL_DAILY_SUBJECT = "Daily notice from " & STATION & " CR3000"
'Sub send_daily_email()
'  Dim msg As String * 512
'  msg = "Good morning, it's the " & STATION & " CR3000. Yesterday's data "
'  msg &= "files are attached. [" & VERSION & "]"
'  Dim ok As Boolean
'  ok = EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,EMAIL_DAILY_SUBJECT,msg, _
'         "",SMTP_USER,SMTP_PASS,smtp_response)
'  email_failed = NOT ok
'EndSub

'================================ FUNCTIONS =================================
Function convert_dc1100_value(number) As Float
  'counts/100 per cubic foot => counts per cubic meter
  Return INT(number * 100 * FT3_PER_M3)
EndFunction

'============================== SUBROUTINES =================================
Sub setup()
  SerialOpen(DYLOS_COM,DYLOS_BAUD,DYLOS_FMT,0,DYLOS_BUFF)
'  SerialOpen(CH4_COM,CH4_BAUD,CH4_FMT,0,CH4_BUFF)

  li840a_config = ("<li840><cfg><outrate>1</outrate></cfg><rs232><co2>true</co2>" & _
        "<co2abs>false</co2abs><h2o>true</h2o><h2odewpoint>true</h2odewpoint>" & _
        "<h2oabs>false</h2oabs><celltemp>true</celltemp><cellpres>true</cellpres>" & _
        "<ivolt>true</ivolt><raw>false</raw><strip>true</strip></rs232></li840>")
  li840a_resp = ("<li840><ack>true</ack></li840>")
  SerialOpen(LI840A_COM,LI840A_BAUD,LI840A_FMT,0,LI840A_BUFF)
  SerialOut(LI840A_COM,li840a_config,li840a_resp,3,1)

  Move(li840a(1),6,NAN,1)      'HACK ensure serial dest vars begin @ NAN to prevent
'  Move(ch4(1),25,NAN,1)         'inclusion of 0 in first averages produced
  Move(dc1100_vals(1),2,NAN,1)
  Move(dc1100(1),2,NAN,1)

  RealTime(rtime(1))
  'Scheduled sampling: outside :00-:15 & :30-:45, inside :15-:30 & :45-:00
  ctrl_smp_vlv = IIF((rtime(5) MOD 30) < 15, 0, 5000)
  is_sampling_indoor = ctrl_smp_vlv
  'WARN: not waiting to flush plumbing...
EndSub


'========================= MAIN PROGRAM =====================================
BeginProg
  SetStatus("StationName", SELF) 'XXXX mutually exclusive with `CardOut()`
'  send_startup_email()
  setup()

  Scan(1,Sec,10,0)
    VoltDiff(dusttrak2_analog_pm25,1,mv5000,DF_TSI_PM,True,0,INTEG,TSI_PM_MLT,TSI_PM_OFF)
    VoltDiff(t300_CO,1,mv5000,DF_CO,True,0,INTEG,CO_MLT,CO_OFF)
    VoltDiff(t200_NOx,1,mv5000,DF_NOX,True,0,INTEG,NOX_MLT,NOX_OFF)
    VoltDiff(t200_NO,1,mv5000,DF_NO,True,0,INTEG,NOX_MLT,NOX_OFF)
    VoltDiff(t200_NO2,1,mv5000,DF_NO2,True,0,INTEG,NOX_MLT,NOX_OFF)
    VoltDiff(t400_O3,1,mv5000,DF_O3,True,0,INTEG,O3_MLT,O3_OFF)
    PanelTemp(logger_self_T,INTEG)
    TCDiff(typeT_sample_T,1,mV20,DF_TYPE_T,TypeT,logger_self_T,1,0,INTEG,1,0)

'    SerialIn(ch4_record,CH4_COM,5,&h0A,CH4_BUFF)
'    If (Len(ch4_record)) Then
'      SplitStr(ch4(1),ch4_record,", ",25,6)
'      ch4_year = ch4(1) 'convert string->float
'      'HACK - compare record year with logger timestamp to verify correctly parsed
'      disable_ugga = NOT(ch4_year = rtime(1))
'      ugga_gas_P *= MBAR_PER_TORR
'      ugga_H2O /= 1000 'ppmv -> ppthv
'    ElseIf (ch4_year = NAN) Then
'      'do nothing, UGGA vars already set to NAN
'    Else
'      Move(ch4(1),25,NAN,1)
'      ch4_year = NAN
'    EndIf

    If (debug_on) Then CallTable(debug)
    CallTable(tsdata)

    'state init'd during setup()
    If TimeIsBetween(0,15,30,Min) Then
      ctrl_smp_vlv = 0 'off = outdoor air
    Else
      ctrl_smp_vlv = 5000 'on = indoor air
    EndIf
    If (TimeIsBetween(0,1,30,Min) OR TimeIsBetween(15,16,30,Min)) Then
      tflag = 1
    Else
      tflag = 0
    EndIf
    is_sampling_indoor = (ctrl_smp_vlv > 0)
    ExciteCAO(CAO_SMP_VLV,ctrl_smp_vlv,True)

    If TimeIsBetween(ZERO_OFF,ZERO_OFF+ZERO_DUR,ZERO_INTV,Min) Then
      ctrl_ptr_zero = 5000 'on
    Else
      ctrl_ptr_zero = 0 'off
    EndIf
    is_zeroing_PTRMS = (ctrl_ptr_zero > 0)
    ExciteCAO(CAO_ZERO,ctrl_ptr_zero,True)

    If TimeIntoInterval(1,10,Min) Then
      RealTime(rtime(1)) 'for UGGA message check
      NTP_offset = NetworkTimeProtocol(NTP_ADDR,UTC_OFFSET,NTP_DEV)
    EndIf
  NextScan
  
  SlowSequence
  Scan(1,Sec,2,0)
    SerialIn(li840a_record,LI840A_COM,50,&h0A,LI840A_BUFF)
    If (Len(li840a_record)) Then
      SplitStr(li840a(1),li840a_record,"",6,0)
    Else
      Move(li840a(1),6,NAN,1)
    EndIf
  NextScan

  SlowSequence
  Scan(1,Min,1,0)
    SerialIn(dc1100_record,DYLOS_COM,100,&h0D,DYLOS_BUFF)
    If (Len(dc1100_record)) Then
      SplitStr(dc1100_vals(1),dc1100_record,"",2,0)
      If (dc1100_vals(1)=NAN OR dc1100_vals(2)=NAN) Then
        dc1100_pm_small = NAN
        dc1100_pm_large = NAN
      Else
        dc1100_pm_small = convert_dc1100_value(dc1100_vals(1))
        dc1100_pm_large = convert_dc1100_value(dc1100_vals(2))
      EndIf
      SerialFlush(DYLOS_COM)
    EndIf
  NextScan
    
'  SlowSequence
'  Scan(1,Sec,1,0)
'    If (test_email) Then
'      send_test_email()
'    EndIf
'
'    If TimeIntoInterval(360,1440,Min) Then '6 AM
'      send_daily_email()
'    ElseIf TimeIntoInterval(375, 1440, Min) Then
'      If (email_failed) Then send_daily_email()
'    ElseIf TimeIntoInterval(390, 1440, Min) Then
'      If (email_failed) Then send_daily_email()
'      email_failed = False 'give up until tomorrow
'    EndIf
'
'  NextScan
EndProg

