''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Data acquistion program for outdoor air rack
' Indoor Air Quality and Climate Change study (2015-2016)
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'update before deployment but DO NOT check-in other than empty string!
Const VERSION = ""

'uniquely identify this location/datalogger
Const STATION = "outdoorair"
'version-stamped name for data file headers
Const SELF = STATION & "(" & VERSION & ")"

Const DF_TSI_PM = 4
Const TSI_PM_OFF = 0
Const TSI_PM_MLT = (1.0 - TSI_PM_OFF)/5000 '0-1.0 mg/m^3, 0-5V

'Const DF_CO_T = 6 'optical bench tmpr, type T thermocouple
'Const DF_CO = 2
'Const CO_OFF = 0
'Const CO_MLT = (20 - CO_OFF)/5000 '0-20 ppb, 0-5V

Const NOX_ADDR = 42 'instrument-specific address (default: 42)
Const PREFIX = CHR(128 + NOX_ADDR)
Const CR = CHR(13) 'carriage return

Const NOX_DELAY = 350 '(empirical) delay between data queries, msec
Const NOX_COM = Com1
Const NOX_BAUD = 9600
Const NOX_FMT = 3 '8/n/1, RS232 logic
Const NOX_REC = 42 'longest result's ~41 chars
Const NOX_BUFF = 1+2*NOX_REC

'Const CH4_COM = Com4
'Const CH4_BAUD = 19200
'Const CH4_FMT = 19 '8/n/1, TTL logic
'Const CH4_BUFF = 800

Const O3_COM = Com2
Const O3_BAUD = 19200
Const O3_FMT = 3 '8/n/1
Const O3_REC = 80
Const O3_BUFF = 1+2*O3_REC

Const LI840A_COM = Com3
Const LI840A_BAUD = 9600
Const LI840A_FMT = 3 '8/n/1, RS232 logic
Const LI840A_REC = 350
Const LI840A_BUFF = LI840A_REC*2 + 1

Const DF_TYPE_T = 7

Const CAO_SMP_VLV = 2 'sample source: indoor/outdoor
Const CAO_CO_ZERO = 1 'CO monitor: sample/zero air (scrubbed)
Const C_PTR_ZERO = 7 'PTR-MS: sample/zero air (generated)

'============================== INTERNALS ===================================
Const INTEG = 250
Const DAYS_OF_DATA = 14 'saved to CPU

Const MBAR_PER_TORR = 1.3332237
Const MBAR_PER_KPA = 10

Public debug_on As Boolean

Const NTP_ADDR = "0.us.pool.ntp.org"
Const NTP_OFFSET = -8*3600 'sec from UTC = PST
Const NTP_DEV = 100 'ms, tolerable drift
Dim clock_drift
Units clock_drift = ms

Dim dusttrak2_analog_pm25
Units dusttrak2_analog_pm25 = mg/m^3

'Dim co(2)
'Alias co(1) = m48_CO
'Alias co(2) = m48_cell_T
'Units m48_CO = ppmv
'Units m48_cell_T = degC

Dim o3_record As String * O3_REC
Dim o3(9)
Alias o3(1) = m205_O3
Alias o3(2) = m205_cell_T
Alias o3(3) = m205_cell_P
'4: date, day of month    '7: time, hour
'5: date, month           '8: time, minute
'6: date, short year      '9: time, second
Units m205_O3 = ppbv
Units m205_cell_T = degC
Units m205_cell_P = mbar

Dim nox_record(4) As String * NOX_REC
Dim nox_bytes
Dim nox(6)
'nox(1): HACK catches "2" within "no2"
Alias nox(2) = m42C_NO2
Alias nox(3) = m42C_NO
Alias nox(4) = m42C_NOx
Alias nox(5) = nox_tmpr 'should mirror nox(6)
Alias nox(6) = m42C_tmpr 'measured value
Units nox = ppbv
Units nox_tmpr = degC
Units m42C_tmpr = degC

'Dim ch4_record As String * 400
'Dim ch4_year
'Dim ch4(25)
''1: date (only year captured)   '2: time (only hour captured)
'Alias ch4(3)  = ugga_CH4        '4: CH4 s.d.
'Alias ch4(5)  = ugga_H2O        '6: H2O s.d.
'Alias ch4(7)  = ugga_CO2        '8: CO2 s.d.
'Alias ch4(9)  = ugga_CH4_dry    '10: CH4 dry s.d.
'Alias ch4(11) = ugga_CO2_dry    '12: CO2 dry s.d.
'Alias ch4(13) = ugga_gas_P      '14: gas P s.d.
'Alias ch4(15) = ugga_gas_T      '16: gas T s.d.
'Alias ch4(17) = ugga_self_T     '18: self T s.d.
'Alias ch4(19) = ugga_ringdown0  '20: ringdown #0 s.d.
'Alias ch4(21) = ugga_ringdown1  '22: ringdown #1 s.d.
'Alias ch4(23) = ugga_fit_flag   '24: MIU valve
''25: MIU description
'Units ugga_CH4 = ppmv
'Units ugga_H2O = ppmv
'Units ugga_CO2 = ppmv
'Units ugga_CH4_dry = ppmv
'Units ugga_CO2_dry = ppmv
'Units ugga_gas_P = mbar
'Units ugga_gas_T = degC
'Units ugga_self_T = degC
'Units ugga_ringdown0 = usec
'Units ugga_ringdown1 = usec
'Units ugga_fit_flag = arb

Dim li840a_record As String * LI840A_REC
Dim li840a(32)
'HINT dumb-parsing method ("on non-numeric") also catches numbers within XML tag names
'(1) <li840>
Alias li840a(2) = li840a_cell_T
Alias li840a(3) = li840a_cell_P 'read as kPa, converted to mbar
'(4) <co2>
Alias li840a(5) = li840a_CO2
'(6) </co2>
'(7) <co2abs>
'(8) CO2 absorbance value
'(9) </co2abs>
'(10) <h2o>
Alias li840a(11) = li840a_H2O
'(12) </h2o>
'(13) <h2oabs>
'(14) H2O absorbance value
'(15) </h2oabs>
'(16) <h2odewpoint>
Alias li840a(17) = li840a_dewpoint
'(18) </h2odewpoint>
Alias li840a(19) = li840a_pwr_src
'(20) <co2> (raw)
'(21) raw CO2 number
'(22) </co2>
'(23) <co2ref>
'(24) raw CO2 ref. number
'(25) </co2ref>
'(26) <h2o>
'(27) raw H2O number
'(28) </h2o>
'(29) <h2oref>
'(30) raw H2O number
'(31) </h2oref>
'(32) </li840a>
Units li840a_cell_T = degC
Units li840a_cell_P = mbar
Units li840a_CO2 = ppmv
Units li840a_H2O = ppthv
Units li840a_dewpoint = degC
Units li840a_pwr_src = Vdc

Dim typeT_sample_T
Dim logger_panel_T
Units typeT_sample_T = degC
Units logger_panel_T = degC

Dim cr3k_lithium_battery
Units cr3k_lithium_battery = Volts

Dim ctrl_smp_vlv
Dim ctrl_co_zero
Dim ctrl_ptr_zero
Dim is_sampling_indoor As Boolean
Dim tflag As Boolean 'transition flag
Dim zflag As Boolean 'CO/PTRMS zero flag
Dim is_zeroing_CO As Boolean
Dim is_zeroing_PTRMS As Boolean

Dim rtime(9) As Long
Dim inbetween_1min_scan As Boolean
Dim just_had_1min_scan As Boolean
'Dim time_for_telemetry_report As Boolean

'Dim t(36)
't(1)  = 
't(2)  = dc1100_pm_small
't(3)  = dc1100_pm_large
't(4)  = co2_licor
't(5)  = h2o_licor
't(6)  = m205_O3     'Average(3,...)
't(7)  = m205_cell_T
't(8)  = m205_cell_P
't(9)  = m405_NO2    'Average(15,...)
't(10) = m405_NO
't(11) = m405_NOx
't(12) = m405_NO2_zero
't(13) = m405_NO_zero
't(14) = m405_flow_factor
't(15) = m405_cell_T
't(16) = m405_cell_P
't(17) = m405_overflow_F
't(18) = m405_cell_F
't(19) = m405_O3_F
't(20) = m405_samp_LED_V
't(21) = m405_ref_LED_V
't(22) = m405_NO_gen_V
't(23) = m405_scrubber_T
't(24) = ugga_CH4
't(25) = ugga_H2O
't(26) = ugga_CO2
't(27) = ugga_CH4_dry
't(28) = ugga_CO2_dry
't(29) = ugga_gas_P
't(30) = ugga_gas_T
't(31) = ugga_self_T
't(32) = ugga_ringdown0
't(33) = ugga_ringdown1
't(34) = ugga_fit_flag
't(35) = typek_amb_T
't(36) = logger_panel_T


'============================ DATA TABLES ===================================
DataTable(tsdata,True,1440*DAYS_OF_DATA)
  DataInterval(0,1,min,5)
  Sample(1,is_sampling_indoor,Boolean)
  Sample(1,tflag,Boolean)
    FieldNames("transition_flag")
'  Sample(1,is_zeroing_CO,Boolean)
'  Average(1,m48_CO,IEEE4,m48_CO=NAN)
'    FieldNames("m48_CO")
'  Average(1,m48_cell_T,IEEE4,m48_cell_T=NAN)
'    FieldNames("m48_cell_T")
  Sample(2,o3(1),FP2)
  Sample(1,o3(3),IEEE4)
  Sample(3,nox(2),IEEE4)
  Sample(1,nox(6),IEEE4)
'  Average(1,ugga_CH4,FP2,disable_ugga OR ugga_CH4=NAN)
'    FieldNames("ugga_CH4")
'  Average(1,ugga_H2O,IEEE4,disable_ugga OR ugga_H2O=NAN)
'    FieldNames("ugga_H2O")
'  Average(1,ugga_CO2,FP2,disable_ugga OR ugga_CO2=NAN)
'    FieldNames("ugga_CO2")
'  Average(1,ugga_CH4_dry,FP2,disable_ugga OR ugga_CH4_dry=NAN)
'    FieldNames("ugga_CH4_dry")
'  Average(1,ugga_CO2_dry,FP2,disable_ugga OR ugga_CO2_dry=NAN)
'    FieldNames("ugga_CO2_dry")
'  Average(1,ugga_gas_P,IEEE4,disable_ugga OR ugga_gas_P=NAN)
'    FieldNames("ugga_gas_P")
'  Average(1,ugga_gas_T,FP2,disable_ugga OR ugga_gas_T=NAN)
'    FieldNames("ugga_gas_T")
'  Average(1,ugga_self_T,FP2,disable_ugga OR ugga_self_T=NAN)
'    FieldNames("ugga_self_T")
'  Average(1,ugga_fit_flag,FP2,disable_ugga OR ugga_fit_flag=NAN)
'    FieldNames("ugga_fit_flag")
  Average(1,li840a_CO2,IEEE4,li840a_CO2=NAN)
    FieldNames("li840a_CO2")
  Average(1,li840a_H2O,IEEE4,li840a_H2O=NAN)
    FieldNames("li840a_H2O")
  Average(1,li840a_cell_T,IEEE4,li840a_cell_T=NAN)
    FieldNames("li840a_cell_T")
  Average(1,li840a_cell_P,IEEE4,li840a_cell_P=NAN)
    FieldNames("li840a_cell_P")
  Average(1,li840a_dewpoint,IEEE4,li840a_dewpoint=NAN)
    FieldNames("li840a_dewpoint")
  Average(1,li840a_pwr_src,IEEE4,li840a_pwr_src=NAN)
    FieldNames("li840a_pwr_src")
  Average(1,typeT_sample_T,FP2,typeT_sample_T=NAN)
    FieldNames("typeT_sample_T")
  Average(1,logger_panel_T,FP2,logger_panel_T=NAN)
    FieldNames("logger_panel_T")
  Sample(1,is_zeroing_PTRMS,Boolean)
  Sample(1,zflag,Boolean)
    FieldNames("zero_flag")
EndTable

DataTable(stats_indoor,(NOT tflag),48*DAYS_OF_DATA)
  DataInterval(0,30,min,1)
'  Average(1,m48_CO,FP2,m48_CO=NAN OR is_zeroing_CO)
'  Average(1,m48_CO,FP2,m48_CO=NAN OR NOT is_zeroing_CO)
'    FieldNames("m48_CO_zero_Avg")
'  Average(1,m48_cell_T,FP2,m48_cell_T=NAN)
  Average(1,m205_O3,FP2,inbetween_1min_scan OR m205_O3=NAN)
  Average(1,m205_cell_T,FP2,inbetween_1min_scan OR m205_cell_T=NAN)
  Average(1,m205_cell_P,IEEE4,inbetween_1min_scan OR m205_cell_P=NAN)
  Average(1,m42C_NO2,FP2,inbetween_1min_scan OR m42C_NO2=NAN)
  Average(1,m42C_NO,FP2,inbetween_1min_scan OR m42C_NO=NAN)
  Average(1,m42C_NOx,FP2,inbetween_1min_scan OR m42C_NOx=NAN)
  Average(1,m42C_tmpr,FP2,inbetween_1min_scan OR m42C_tmpr=NAN)
'  Average(1,ugga_CH4,FP2,disable_ugga OR ugga_CH4=NAN)
'  Average(1,ugga_H2O,IEEE4,disable_ugga OR ugga_H2O=NAN)
'  Average(1,ugga_CO2,FP2,disable_ugga OR ugga_CO2=NAN)
'  Average(1,ugga_CH4_dry,FP2,disable_ugga OR ugga_CH4_dry=NAN)
'  Average(1,ugga_CO2_dry,FP2,disable_ugga OR ugga_CO2_dry=NAN)
'  Average(1,ugga_gas_P,IEEE4,disable_ugga OR ugga_gas_P=NAN)
'  Average(1,ugga_gas_T,FP2,disable_ugga OR ugga_gas_T=NAN)
'  Average(1,ugga_self_T,FP2,disable_ugga OR ugga_self_T=NAN)
'  Average(1,ugga_fit_flag,FP2,disable_ugga OR ugga_fit_flag=NAN)
  Average(1,li840a_CO2,IEEE4,li840a_CO2=NAN)
  Average(1,li840a_H2O,IEEE4,li840a_H2O=NAN)
  Average(1,li840a_cell_T,FP2,li840a_cell_T=NAN)
  Average(1,li840a_cell_P,IEEE4,li840a_cell_P=NAN)
  Average(1,li840a_dewpoint,FP2,li840a_dewpoint=NAN)
  Average(1,typeT_sample_T,FP2,typeT_sample_T=NAN)
  Average(1,logger_panel_T,FP2,logger_panel_T=NAN)
EndTable

DataTable(stats_outdoor,(NOT tflag),48*DAYS_OF_DATA)
  DataInterval(0,30,min,1)
'  Average(1,m48_CO,FP2,m48_CO=NAN OR is_zeroing_CO)
'  Average(1,m48_CO,FP2,m48_CO=NAN OR NOT is_zeroing_CO)
'    FieldNames("m48_CO_zero_Avg")
'  Average(1,m48_cell_T,FP2,m48_cell_T=NAN)
  Average(1,m205_O3,FP2,inbetween_1min_scan OR m205_O3=NAN)
  Average(1,m205_cell_T,FP2,inbetween_1min_scan OR m205_cell_T=NAN)
  Average(1,m205_cell_P,IEEE4,inbetween_1min_scan OR m205_cell_P=NAN)
  Average(1,m42C_NO2,FP2,inbetween_1min_scan OR m42C_NO2=NAN)
  Average(1,m42C_NO,FP2,inbetween_1min_scan OR m42C_NO=NAN)
  Average(1,m42C_NOx,FP2,inbetween_1min_scan OR m42C_NOx=NAN)
  Average(1,m42C_tmpr,FP2,inbetween_1min_scan OR m42C_tmpr=NAN)
'  Average(1,ugga_CH4,FP2,disable_ugga OR ugga_CH4=NAN)
'  Average(1,ugga_H2O,IEEE4,disable_ugga OR ugga_H2O=NAN)
'  Average(1,ugga_CO2,FP2,disable_ugga OR ugga_CO2=NAN)
'  Average(1,ugga_CH4_dry,FP2,disable_ugga OR ugga_CH4_dry=NAN)
'  Average(1,ugga_CO2_dry,FP2,disable_ugga OR ugga_CO2_dry=NAN)
'  Average(1,ugga_gas_P,IEEE4,disable_ugga OR ugga_gas_P=NAN)
'  Average(1,ugga_gas_T,FP2,disable_ugga OR ugga_gas_T=NAN)
'  Average(1,ugga_self_T,FP2,disable_ugga OR ugga_self_T=NAN)
'  Average(1,ugga_fit_flag,FP2,disable_ugga OR ugga_fit_flag=NAN)
  Average(1,li840a_CO2,IEEE4,li840a_CO2=NAN)
  Average(1,li840a_H2O,IEEE4,li840a_H2O=NAN)
  Average(1,li840a_cell_T,FP2,li840a_cell_T=NAN)
  Average(1,li840a_cell_P,IEEE4,li840a_cell_P=NAN)
  Average(1,li840a_dewpoint,FP2,li840a_dewpoint=NAN)
  Average(1,typeT_sample_T,FP2,typeT_sample_T=NAN)
  Average(1,logger_panel_T,FP2,logger_panel_T=NAN)
EndTable

DataTable(debug,True,1)
  Sample(1,dusttrak2_analog_pm25,IEEE4)
'  Sample(2,co(1),IEEE4)
  Sample(1,o3_record,String)
  Sample(9,o3(1),IEEE4)
  Sample(1,nox_record,String)
  Sample(1,nox_bytes,IEEE4)
  Sample(6,nox(1),IEEE4)
'  Sample(1,ch4_record,String)
'  Sample(25,ch4(1),IEEE4)
'  Sample(1,disable_ugga,Boolean)
  Sample(1,li840a_record,String)
  Sample(32,li840a(1),IEEE4)
  Sample(1,typeT_sample_T,IEEE4)
  Sample(1,logger_panel_T,IEEE4)
'  Sample(1,smtp_response,String)
'  Sample(1,scadabr_resp,String)
'  Sample(1,scadabr_success,Boolean)
  Sample(1,clock_drift,IEEE4)
  Sample(1,ctrl_smp_vlv,IEEE4)
  Sample(1,ctrl_co_zero,IEEE4)
  Sample(1,ctrl_ptr_zero,IEEE4)
  Sample(1,is_sampling_indoor,Boolean)
  Sample(1,tflag,Boolean)
  Sample(1,zflag,Boolean)
  Sample(1,is_zeroing_CO,Boolean)
  Sample(1,is_zeroing_PTRMS,Boolean)
EndTable


'================================== MENU ====================================
Const Yes = True
Const Cancel = False
Const No = False

'Public test_email As Boolean
'Public test_scadabr As Boolean

DisplayMenu("Indoor AQ", -1)
  SubMenu("Debug")
    SubMenu("Monitor sensors")
      DisplayValue("TypeT tmpr.", typeT_sample_T)
      DisplayValue("Panel tmpr.", logger_panel_T)
      DisplayValue("Dusttrak PM", dusttrak2_analog_pm25)
'      SubMenu("CO (TECO)")
'        DisplayValue("CO", m48_CO)
'        DisplayValue("cell tmpr.", m48_cell_T)
'      EndSubMenu
      SubMenu("O3 (2B Tech)")
        DisplayValue("O3", m205_O3)
        DisplayValue("Cell tmpr.", m205_cell_T)
        DisplayValue("Cell press.", m205_cell_P)
      EndSubMenu
      SubMenu("NO/NO2 (TECO)")
        DisplayValue("NO2", m42C_NO2)
        DisplayValue("NO", m42C_NO)
        DisplayValue("NOx", m42C_NOx)
        DisplayValue("tmpr.", m42C_tmpr)
      EndSubMenu
'      SubMenu("CH4/CO2/H2O (LGR)")
'        DisplayValue("CH4", ugga_CH4)
'        DisplayValue("CO2", ugga_CO2)
'        DisplayValue("H2O", ugga_H2O)
'        DisplayValue("CH4 (dry)", ugga_CH4_dry)
'        DisplayValue("CO2 (dry)", ugga_CO2_dry)
'        DisplayValue("gas press.", ugga_gas_P)
'        DisplayValue("gas tmpr.", ugga_gas_T)
'        DisplayValue("self tmpr.", ugga_self_T)
'        DisplayValue("ringdown 0", ugga_ringdown0)
'        DisplayValue("ringdown 1", ugga_ringdown1)
'        DisplayValue("fit flag", ugga_fit_flag)
'      EndSubMenu
      SubMenu("CO2/H2O (Licor)")
        DisplayValue("CO2", li840a_CO2)
        DisplayValue("H2O", li840a_H2O)
        DisplayValue("Cell tmpr.", li840a_cell_T)
        DisplayValue("Cell press.", li840a_cell_P)
        DisplayValue("Dewpoint", li840a_dewpoint)
        DisplayValue("Power in", li840a_pwr_src)
      EndSubMenu
    EndSubMenu
    MenuItem("Debug  ON", debug_on)
      MenuPick(No,Yes)
'    MenuItem("Test email", test_email)
'      MenuPick(Cancel, Yes)
'    MenuItem("Test ScadaBR", test_scadabr)
'      MenuPick(Cancel, Yes)
    DisplayValue("Indoor air?", is_sampling_indoor)
'    DisplayValue("Zero CO?", is_zeroing_CO)
    DisplayValue("Zero PTRMS?", is_zeroing_PTRMS)
  EndSubMenu
EndMenu


''================================ EMAIL ====================================
'Include "CPU:email_Enc.cr3"  'contains non-public settings
'Const CRLF = CHR(13) & CHR(10)
'Dim smtp_response As String * 80
'Dim email_failed As Boolean
'
'Const email_boot_subject = "Start-up notice from " & STATION & " CR3000"
'Sub send_startup_email()
'  Dim msg As String * 512
'  msg = ("This is the " & STATION & " CR3000. Starting up..." & CRLF & CRLF)
'  'HINT both CompileResults and CardStatus come with a trailing <CR><LF> but 
'  'CardStatus has a CRLF pair in the middle which must be stripped out
'  msg &= "Compile results: " & RTrim(Status.CompileResults(1))
'  msg &= "Card status: " & RTrim(Replace(Status.CardStatus(1), CRLF, " "))
'  msg &= CRLF & "Program error count: " & Status.ProgErrors & CRLF
'  msg &= "Watchdog error count: " & Status.WatchdogErrors & CRLF
'  msg &= "Run signature: " & Status.RunSignature & CRLF
'  msg &= "Program signature: " & Status.ProgSignature & CRLF
'  msg &= "Power input (Volts): " & Status.Battery & CRLF
'  msg &= "Git tag: " & SELF & CRLF
'  EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,email_boot_subject,msg,"", _
'      SMTP_USER,SMTP_PASS,smtp_response)
'EndSub
'
'Const email_test_subject = "Test email from " & SELF & " CR3000"
'Const email_test_message = "This is the " & SELF & " CR3000. Testing 1.. 2.. 3.." & CRLF
'Sub send_test_email()
'  EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,email_test_subject,email_test_message,"", _
'      SMTP_USER,SMTP_PASS,smtp_response)
'  test_email = False
'EndSub
'
'Const EMAIL_DAILY_SUBJECT = "Daily notice from " & STATION & " CR3000"
'Sub send_daily_email()
'  Dim msg As String * 512
'  msg = "Good morning, it's the " & STATION & " CR3000. Yesterday's data "
'  msg &= "files are attached. [" & VERSION & "]"
'  Dim ok As Boolean
'  ok = EmailSend(SMTP_SERV,EMAIL_TO,EMAIL_FROM,EMAIL_DAILY_SUBJECT,msg, _
'         "",SMTP_USER,SMTP_PASS,smtp_response)
'  email_failed = NOT ok
'EndSub
'
'
''============================= SCADABR INTEGRATION ==================================
'Include("CPU:scadabr_Enc.cr3")
'Dim scadabr_socket As Long
'Dim rtime(9) As Long
'Dim scadabr_success As Boolean
'Dim scadabr_resp As String * 256
'
'Sub send_scadabr_data(payload As String * 1000)
'  Dim uri As String * 1085
'  Dim tstamp As String * 18
'  RealTime(rtime)
'  Sprintf(tstamp,"%04u%02u%02u%02u%02u%02u", rtime(1),rtime(2),rtime(3),rtime(4),rtime(5),rtime(6))
'  uri = REPORT_URL & tstamp & payload
'  scadabr_socket = HTTPGet(uri, scadabr_resp, "")
'  scadabr_success = NOT (scadabr_socket OR Len(scadabr_resp))
'EndSub
'
'Sub send_test_ScadaBR()
'  send_scadabr_data("&testing=0")
'  test_scadabr = False
'EndSub
'
''                1                 2                    3                    4
'Const REPORT1 = "&dusttrak2_pm=%.3f&dc1100_pm_small=%.1f&dc1100_pm_large=%.1f&co2_licor=%.3f"
''                5              6            7                8                9
'Const REPORT2 = "&h2o_licor=%.3f&m205_o3=%.1f&m205_cell_t=%.1f&m205_cell_p=%.1f&m405_no2=%.1f"
''                10           11            12
'Const REPORT3 = "&m405_no=%.1f&m405_nox=%.1f&m405_no2_zero=%.1f"
''                13                14                    15               16
'Const REPORT4 = "&m405_no_zero=%.1f&m405_flow_factor=%.2f&m405_cell_t=%.1f&m405_cell_p=%.1f"
''                17                   18               19             20
'Const REPORT5 = "&m405_overflow_f=%.1f&m405_cell_f=%.1f&m405_o3_f=%.1f&m405_samp_led_v=%.4f"
''                21                  22                 23
'Const REPORT6 = "&m405_ref_led_v=%.4f&m405_no_gen_v=%.4f&m405_scrubber_t=%.2f"
''                24              25              26              27
'Const REPORT7 = "&ugga_ch4=%.2f&ugga_h2o=%.1f&ugga_co2=%.1f&ugga_ch4_dry=%.2f"
''                28                  29                30                31
'Const REPORT8 = "&ugga_co2_dry=%.1f&ugga_gas_p=%.4f&ugga_gas_t=%.1f&ugga_self_t=%.1f"
''                32                    33                    34
'Const REPORT9 = "&ugga_ringdown0=%.4f&ugga_ringdown1=%.4f&ugga_fit_flag=%.1f"
''                35               36
'Const REPORT0 = "&typek_amb_t=%.1f&logger_panel_T=%.1f&dc1100_size_ratio=%.1f"
'Sub send_telemetry_report()
'  Dim msg1 As String * 100, msg2 As String * 100, msg3 As String * 100
'  Dim msg4 As String * 100, msg5 As String * 100, msg6 As String * 100
'  Dim msg7 As String * 100, msg8 As String * 100, msg9 As String * 100
'  Dim msg0 As String * 100
'  Dim payload As String * 1000
'  Sprintf(msg1,REPORT1,t(1),t(2),t(3),t(4))
'  Sprintf(msg2,REPORT2,t(5),t(6),t(7),t(8),t(9))
'  Sprintf(msg3,REPORT3,t(10),t(11),t(12))
'  Sprintf(msg4,REPORT4,t(13),t(14),t(15),t(16))
'  Sprintf(msg5,REPORT5,t(17),t(18),t(19),t(20))
'  Sprintf(msg6,REPORT6,t(21),t(22),t(23))
'  Sprintf(msg7,REPORT7,t(24),t(25),t(26),t(27))
'  Sprintf(msg8,REPORT8,t(28),t(29),t(30),t(31))
'  Sprintf(msg9,REPORT9,t(32),t(33),t(34))
'  Sprintf(msg0,REPORT0,t(35),t(36),dc1100_size_ratio)
'  payload = msg1 & msg2 & msg3 & msg4 & msg5 & msg6 & msg7 & msg8 & msg9 & msg0
'  send_scadabr_data(payload)
'EndSub
'
''HINT - just send most recent value instead of 5-min mean,
''since that would require a fair amount of infrastructure
''and time-series data is already emailed daily
'Sub send_alphasensors_report()
'  Dim msg1 As String * 64, msg2 As String * 64
'  Sprintf(msg1,"&b4_co_mv=%.1f&b4_no_mv=%.1f&b4_o3_mv=%.1f",B4_CO_mV,B4_NO_mV,B4_O3_mV)
'  Sprintf(msg2,"&b4_co_est=%.1f&b4_no_est=%.1f&b4_o3_est=%.1f", B4_CO_est,B4_NO_est,B4_O3_est)
'  send_scadabr_data(msg1 & msg2)
'EndSub


'============================== SUBROUTINES =================================
Sub setup()
  SerialOpen(NOX_COM,NOX_BAUD,NOX_FMT,0,NOX_BUFF)
'  SerialOpen(CH4_COM,CH4_BAUD,CH4_FMT,0,CH4_BUFF)
  SerialOpen(O3_COM,O3_BAUD,O3_FMT,0,O3_BUFF)
  SerialOpen(LI840A_COM,LI840A_BAUD,LI840A_FMT,0,LI840A_BUFF)
  Move(li840a(1),32,NAN,1)      'HACK ensure serial dest vars begin @ NAN to prevent
'  Move(ch4(1),25,NAN,1)         'inclusion of 0 in first averages produced
  Move(o3(1),3,NAN,1)
  Move(nox(1),6,NAN,1)

  RealTime(rtime(1))
  'Scheduled sampling: outside :00-:15 & :30-:45, inside :15-:30 & :45-:00
  ctrl_smp_vlv = IIF((rtime(5) MOD 30) < 15, 0, 5000)
  is_sampling_indoor = ctrl_smp_vlv
  'WARN: not waiting to flush plumbing...
EndSub


'========================= MAIN PROGRAM =====================================
BeginProg
  SetStatus("StationName", SELF)
'  send_startup_email()
  setup()

  'HINT - Los Gatos Research GGA-30p CH4/CO2/H2O analyzer sends messages at
  '       not precisely 1Hz... run twice as fast to avoid losing messages.
  '       Same for Licor LI-840A CO2/H2O analyzer
  Scan(500,mSec,10,0)
    VoltDiff(dusttrak2_analog_pm25,1,mv5000,DF_TSI_PM,True,0,INTEG,TSI_PM_MLT,TSI_PM_OFF)
'    VoltDiff(m48_CO,1,mv5000,DF_CO,True,0,INTEG,CO_MLT,CO_OFF)
    PanelTemp(logger_panel_T,INTEG)
    TCDiff(typeT_sample_T,1,mV20,DF_TYPE_T,TypeT,logger_panel_T,1,0,INTEG,1,0)
'    TCDiff(m48_cell_T,1,mv20,DF_CO_T,TypeT,logger_panel_T,1,0,INTEG,1,0)

'    SerialIn(ch4_record,CH4_COM,5,&h0A,CH4_BUFF)
'    If (Len(ch4_record)) Then
'      SplitStr(ch4(1),ch4_record,", ",25,6)
'      ch4_year = ch4(1) 'convert string->float
'      'HACK - compare record year with logger timestamp to verify correctly parsed
'      disable_ugga = NOT(ch4_year = rtime(1))
'      ugga_gas_P *= MBAR_PER_TORR
'    ElseIf (ch4_year = NAN) Then
'      'do nothing, UGGA vars already set to NAN
'    Else
'      Move(ch4(1),25,NAN,1)
'      ch4_year = NAN
'    EndIf

    SerialIn(li840a_record,LI840A_COM,5,&h0A,LI840A_BUFF)
    If (Len(li840a_record)) Then
      SplitStr(li840a(1),li840a_record,"",32,0)
      li840a_cell_P *= MBAR_PER_KPA
      'HACK: messages can get parsed even if only partially received,
      'so throw away data if parsed cell tmpr value is not about 51*C
      If (li840a_cell_T < 45 OR li840a_cell_T > 55) Then
        Move(li840a(1),32,NAN,1)
      EndIf
    EndIf

    If (debug_on) Then CallTable(debug)
    CallTable(tsdata)
    If TimeIntoInterval(0,30,Min) Then
      CallTable(stats_indoor)
      CallTable(stats_outdoor)
    ElseIf (is_sampling_indoor) Then 
      CallTable(stats_indoor)
    ElseIf (NOT is_sampling_indoor) Then 
      CallTable(stats_outdoor)
    EndIf
'    CallTable(telemetry)
'    If (telemetry.Output(1,1)) Then time_for_telemetry_report = True

    'state init'd during setup()
    If TimeIntoInterval(0,30,Min) Then
      ctrl_smp_vlv = 0 'off = outdoor air
      tflag = 1
    ElseIf TimeIntoInterval(1,30,Min) Then
      tflag = 0
    ElseIf TimeIntoInterval(15,30,Min) Then
      ctrl_smp_vlv = 5000 'on = indoor air
      tflag = 1
    ElseIf TimeIntoInterval(16,30,Min) Then
      tflag = 0
    EndIf
    is_sampling_indoor = (ctrl_smp_vlv > 0)
    ExciteCAO(CAO_SMP_VLV,ctrl_smp_vlv,True)

    'not init'd so possibility of 1st event being skipped
    If TimeIntoInterval(60,1440,Min) Then '01:00
      ctrl_co_zero = 5000 'on
      ctrl_ptr_zero = 5000 'on
      zflag = 1
    ElseIf TimeIntoInterval(2,1440,Min) Then '01:02
      zflag = 0
    ElseIf TimeIntoInterval(120,1440,Min) Then '02:00
      ctrl_co_zero = 0 'off
      ctrl_ptr_zero = 0 'off
      zflag = 1
    ElseIf TimeIntoInterval(122,360,Min) Then '02:02
      zflag = 0
    EndIf
    is_zeroing_CO = (ctrl_co_zero > 0)
    is_zeroing_PTRMS = (ctrl_ptr_zero > 0)
    ExciteCAO(CAO_CO_ZERO,ctrl_co_zero,True)
    PortSet(C_PTR_ZERO,ctrl_ptr_zero)

    If TimeIntoInterval(1,10,Min) Then
      'RealTime(rtime(1)) 'for UGGA message check
      clock_drift = NetworkTimeProtocol(NTP_ADDR,NTP_OFFSET,NTP_DEV)
    EndIf

    inbetween_1min_scan = True
    If (just_had_1min_scan) Then
      just_had_1min_scan = False
      inbetween_1min_scan = False
    EndIf
  NextScan

  SlowSequence
  Scan(1,Min,1,0)
    SerialIn(o3_record,O3_COM,100,&h0D,O3_REC)
    If (Len(o3_record)) Then
      SplitStr(o3(1),o3_record,"",9,0)
      If (o3(9)=NAN) Then Move(o3(1),9,NAN,1)
      SerialFlush(O3_COM)
    EndIf

    'SerialIn & SerialOut run sequentially from processing task
    'regardless of program mode (pipeline/sequential)
    '
    'Bench tests reveal a delay of at least 300ms be introduced 
    'between queries to prevent incomplete responses
    SerialOut(NOX_COM,(PREFIX & "no2" & CR),"",0,0)
    SerialIn(nox_record(1),NOX_COM,100,&H0d,NOX_REC)
    Delay(1,NOX_DELAY,mSec)
    SerialOut(NOX_COM,(PREFIX & "no" & CR),"",0,0)
    SerialIn(nox_record(2),NOX_COM,100,&H0d,NOX_REC)
    Delay(1,NOX_DELAY,mSec)   
    SerialOut(NOX_COM,(PREFIX & "nox" & CR),"",0,0)
    SerialIn(nox_record(3),NOX_COM,100,&H0d,NOX_REC)
    Delay(1,NOX_DELAY,mSec)
    SerialOut(NOX_COM,(PREFIX & "internal temp" & CR),"",0,0)
    SerialIn(nox_record(4),NOX_COM,100,&H0d,NOX_REC)
    'Update all values before processing (by ignoring non-numeric chars)
    SplitStr(nox(1),nox_record(1),"",2,0) 'catch "2" within "no2" into teco_42C(1)
    SplitStr(nox(3),nox_record(2),"",1,0)
    SplitStr(nox(4),nox_record(3),"",1,0)
    SplitStr(nox(5),nox_record(4),"",2,0)

    just_had_1min_scan = True
  NextScan
    
'  SlowSequence
'  Scan(1,Sec,1,0)
'    If (debug_on) Then CallTable(debug)
'    If (test_scadabr) Then
'      send_test_scadabr()
'    EndIf
'    If (test_email) Then
'      send_test_email()
'    EndIf
'
'    If (time_for_telemetry_report) Then
'      time_for_telemetry_report = False
'      GetRecord(t(1),telemetry,1)
'      If (t(3) = 0) Then
'        dc1100_size_ratio = NAN
'      Else
'        dc1100_size_ratio = LOG(t(2)/t(3))
'      EndIf
'      send_telemetry_report()
'      send_alphasensors_report()
'    EndIf
'
'    If TimeIntoInterval(360,1440,Min) Then '6 AM
'      send_daily_email()
'    ElseIf TimeIntoInterval(375, 1440, Min) Then
'      If (email_failed) Then send_daily_email()
'    ElseIf TimeIntoInterval(390, 1440, Min) Then
'      If (email_failed) Then send_daily_email()
'      email_failed = False 'give up until tomorrow
'    EndIf
'
'    If TimeIntoInterval(0,10,Min) Then
'      RealTime(rtime(1)) 'HINT - happens implicitly within ScadaBR integration
'                         'but do so explicitly here for the UGGA message parsing check
'      clock_drift = NetworkTimeProtocol(NTP_ADDR,NTP_OFFSET,NTP_DEV)
'      send_scadabr_data(FormatFloat(clock_drift,"&clock_drift=%f"))
'
'      cr3k_lithium_battery = Status.LithiumBattery
'      send_scadabr_data(FormatFloat(cr3k_lithium_battery,"&cr3k_lithium_battery=%f"))
'    EndIf
'  NextScan
EndProg

